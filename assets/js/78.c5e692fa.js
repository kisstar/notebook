(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{427:function(a,s,e){"use strict";e.r(s);var r=e(25),t=Object(r.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker-私有仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-私有仓库"}},[a._v("#")]),a._v(" Docker 私有仓库")]),a._v(" "),e("p",[a._v("在工作中，一些公司的私有镜像或则其它个人镜像并不想提交到公开的仓库中，为了方便对这些镜像进行管理，Docker 不仅提供了一个中央仓库，同时也允许我们搭建本地私有仓库。")]),a._v(" "),e("h2",{attrs:{id:"私有仓库搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#私有仓库搭建"}},[a._v("#")]),a._v(" 私有仓库搭建")]),a._v(" "),e("p",[a._v("Docker 官方提供了一个搭建私有仓库的镜像 "),e("code",[a._v("registry")]),a._v("，运行该镜像并暴露 5000 端口，就可以使用了。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拉取私有仓库镜像")]),a._v("\ndocker pull registry\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动私有仓库容器")]),a._v("\ndocker run -id --name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("registry -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5000")]),a._v(":5000 registry\n")])])]),e("p",[a._v("现在，打开浏览器输入地址 "),e("code",[a._v("http://私有仓库服务器IP:5000/v2/_catalog")]),a._v("，看到 "),e("code",[a._v('{"repositories":[]}')]),a._v(" 表示私有仓库搭建成功。")]),a._v(" "),e("p",[a._v("接着，让 Docker 信任私有仓库地址：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /etc/docker/daemon.json\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# { "insecure-registries": ["私有仓库服务器IP:5000"] }')]),a._v("\n")])])]),e("p",[a._v("设置完成后，需要重启一下 Docker，同时不要忘记启动私有仓库容器：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("systemctl restart docker\ndocker start registry\n")])])]),e("h2",{attrs:{id:"将镜像上传至私有仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将镜像上传至私有仓库"}},[a._v("#")]),a._v(" 将镜像上传至私有仓库")]),a._v(" "),e("p",[a._v("标记本地镜像，将其归入私有仓库：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]")]),a._v("\ndocker tag centos 私有仓库服务器IP:5000/centos\n")])])]),e("p",[a._v("将本地的镜像上传到镜像仓库：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker push [OPTIONS] NAME[:TAG]")]),a._v("\ndocker push 私有仓库服务器IP:5000/centos\n")])])]),e("p",[a._v("Registry 服务默认会将上传的镜像保存在容器的 "),e("code",[a._v("/var/lib/registry")]),a._v(" 目录，所以在启动时我们可以将主机的 "),e("code",[a._v("/opt/registry")]),a._v(" 目录挂载到该目录。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看已上传镜像信息")]),a._v("\n$ docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" registry "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" /var/lib/registry/docker/registry/v2/repositories\ncentos\n")])])]),e("h2",{attrs:{id:"从私有仓库拉取镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从私有仓库拉取镜像"}},[a._v("#")]),a._v(" 从私有仓库拉取镜像")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拉取镜像")]),a._v("\ndocker pull 私有仓库服务器IP:5000/centos\n")])])]),e("h2",{attrs:{id:"harbor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#harbor"}},[a._v("#")]),a._v(" Harbor")]),a._v(" "),e("p",[a._v("Harbor 是一个用于存储和分发 Docker 镜像的企业级 Registry 服务器。")]),a._v(" "),e("p",[a._v("官方提供的私有仓库 "),e("code",[a._v("registry")]),a._v(" 服务，功能比较简单。Harbor 则基于该服务增加了一些安全、访问控制、管理的功能以满足企业对于镜像仓库的需求。")]),a._v(" "),e("p",[a._v("要使用 Harbor 首先需要在 "),e("a",{attrs:{href:"https://github.com/goharbor/harbor/releases",target:"_blank",rel:"noopener noreferrer"}},[a._v("Harbor releases page"),e("OutboundLink")],1),a._v(" 下载你需要的版本（online 和 offline 的区别是后者包含需要的镜像文件）。")]),a._v(" "),e("p",[a._v("以 "),e("code",[a._v("offline")]),a._v(" 版为例，接着使用 "),e("code",[a._v("tar")]),a._v(" 解压安装包：")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" xvf harbor-offline-installer-version.tgz\n")])])]),e("p",[a._v("随后，编辑 "),e("code",[a._v("harbor.yml")]),a._v(" 文件，根据情况修改 "),e("code",[a._v("hostname")]),a._v("、"),e("code",[a._v("post")]),a._v("、存储目录等配置。")]),a._v(" "),e("p",[a._v("最后，通过运行 "),e("code",[a._v("install.sh")]),a._v(" 构建镜像，并把服务启动起来。")]),a._v(" "),e("p",[a._v("详细的按照过程可以查看"),e("a",{attrs:{href:"https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方的说明"),e("OutboundLink")],1),a._v("。")]),a._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/hellxz/p/install_harbor.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("安装 Harbor 管理镜像服务 - 东北小狐狸 - 博客园"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=t.exports}}]);