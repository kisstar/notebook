(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{504:function(s,a,t){"use strict";t.r(a);var e=t(62),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),t("p",[s._v("Dockerfile 由一行行命令语句组成：")]),s._v(" "),t("ul",[t("li",[s._v("每条指令保留字都必须为大写字母且后面要跟随至少一个参数")]),s._v(" "),t("li",[t("code",[s._v("#")]),s._v(" 表示注释")]),s._v(" "),t("li",[s._v("指令按照从上到下，顺序执行")]),s._v(" "),t("li",[s._v("每条指令都会创建一个新的镜像层，并对镜像进行提交")])]),s._v(" "),t("p",[s._v("通常，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。")]),s._v(" "),t("h2",{attrs:{id:"指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[s._v("#")]),s._v(" 指令")]),s._v(" "),t("p",[s._v("指令的一般格式为 "),t("code",[s._v("INSTRUCTION arguments")]),s._v("，指令包括 FROM、MAINTAINER、RUN 等。")]),s._v(" "),t("h3",{attrs:{id:"from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[s._v("#")]),s._v(" FROM")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("FROM <image>")]),s._v(" 或 "),t("code",[s._v("FROM <image>:<tag>")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos:6")]),s._v("\n")])])]),t("p",[s._v("FROM 指令会初始化一个新的构建阶段，并为后续指令设置基础镜像。")]),s._v(" "),t("p",[s._v("所以，一个正确的 Dockerfile 文件的第一条指令必须为 FROM 指令。如果在同一个文件中创建多个镜像时，可以使用多个 FROM 指令（每个镜像一次）。")]),s._v(" "),t("h3",{attrs:{id:"maintainer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maintainer"}},[s._v("#")]),s._v(" MAINTAINER")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("MAINTAINER <name>")]),s._v("，指定维护者信息。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Kisstar <dwh.chn@foxmail.com>"')])]),s._v("\n")])])]),t("p",[s._v("根据官方文档，不推荐再使用 MAINTAINER 指令。相反，应该可以使用 LABEL 指令来定义生成的镜像的作者。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Kisstar <dwh.chn@foxmail.com>"')])]),s._v("\n")])])]),t("p",[s._v("LABEL 指令更加灵活，允许设置元数据，并且可以使用 "),t("code",[s._v("docker inspect")]),s._v(" 命令轻松查看。")]),s._v(" "),t("h3",{attrs:{id:"label"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[s._v("#")]),s._v(" LABEL")]),s._v(" "),t("p",[s._v("LABEL 指令将元数据添加到镜像中。格式为键值对：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" <key>=<value> <key>=<value> ...")]),s._v("\n")])])]),t("p",[s._v("要在标签值中包含空格，请使用引号和反斜杠，就像在命令行解析中一样。一些用法示例：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" version="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" description="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This text illustrates \\\nthat label-values can span multiple lines."')])]),s._v("\n")])])]),t("p",[s._v("基镜像或父镜像（起始行中的镜像）中包含的标签会被镜像继承。如果标签已存在但具有不同的值，则最近应用的值将覆盖以前设置的任何值。")]),s._v(" "),t("p",[s._v("要查看镜像的 LABEL，可以使用 "),t("code",[s._v("docker image inspect")]),s._v(" 命令。通过 "),t("code",[s._v("--format")]),s._v(" 选项仅显示标签；")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[s._v("docker image inspect --format='' centos\n")])])]),t("h3",{attrs:{id:"run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[s._v("#")]),s._v(" RUN")]),s._v(" "),t("p",[s._v("容器构建时需要运行的命令。")]),s._v(" "),t("p",[s._v("格式为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" <command>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executable"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("前者将在 "),t("code",[s._v("shell")]),s._v(" 终端中运行命令，即 "),t("code",[s._v("/bin/sh -c")]),s._v("；后者则使用 "),t("code",[s._v("exec")]),s._v(" 执行。")]),s._v(" "),t("p",[s._v("指定使用其它终端可以通过第二种方式实现，例如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/bash"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo hello"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 "),t("code",[s._v("\\")]),s._v(" 来换行。")]),s._v(" "),t("h3",{attrs:{id:"expose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[s._v("#")]),s._v(" EXPOSE")]),s._v(" "),t("p",[s._v("仅仅只是声明端口，告诉 Docker 服务端容器暴露的端口号，供互联系统使用。")]),s._v(" "),t("p",[s._v("格式为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" <port> [<port>...]")]),s._v("\n")])])]),t("p",[s._v("在利用 -P 参数来启动容器时，也就是 "),t("code",[s._v("docker run -P")]),s._v(" 时，主机会自动随机分配一个端口映射到 EXPOSE 的端口。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 8080")]),s._v("\n")])])]),t("h3",{attrs:{id:"workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[s._v("#")]),s._v(" WORKDIR")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("WORKDIR /path/to/workdir")]),s._v("。")]),s._v(" "),t("p",[s._v("通过该指令可以为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。")]),s._v(" "),t("p",[s._v("可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" b")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" c")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" pwd")]),s._v("\n")])])]),t("p",[s._v("则最终路径为 "),t("code",[s._v("/a/b/c")]),s._v("。")]),s._v(" "),t("p",[s._v("用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。")]),s._v(" "),t("h3",{attrs:{id:"env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[s._v("#")]),s._v(" ENV")]),s._v(" "),t("p",[s._v("指定一个环境变量，在后续的指令中，可以使用这个环境变量，并在容器运行时保持。")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("ENV <key> <value>")]),s._v("。例如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" NODE_VERSION 7.2.0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" curl -SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && curl -SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')])]),s._v("\n")])])]),t("p",[s._v("示例中设置 "),t("code",[s._v("NODE_VERSION = 7.2.0")]),s._v("，在后续的指令中可以通过 $NODE_VERSION 来引用。")]),s._v(" "),t("h3",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[s._v("#")]),s._v(" ADD")]),s._v(" "),t("p",[s._v("ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：")]),s._v(" "),t("ul",[t("li",[s._v("ADD 的优点：在执行 <源文件> 为 "),t("code",[s._v("tar")]),s._v(" 压缩文件的话，压缩格式为 "),t("code",[s._v("gzip")]),s._v(", "),t("code",[s._v("bzip2")]),s._v(" 以及 "),t("code",[s._v("xz")]),s._v(" 的情况下，会自动复制并解压到 <目标路径>。")]),s._v(" "),t("li",[s._v("ADD 的缺点：在不解压的前提下，无法复制 "),t("code",[s._v("tar")]),s._v(" 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。")])]),s._v(" "),t("p",[s._v("格式为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" <src> <dest>")]),s._v("\n")])])]),t("p",[s._v("该命令将复制指定的 "),t("code",[s._v("<src>")]),s._v(" 到容器中的 "),t("code",[s._v("<dest>")]),s._v("。 其中 "),t("code",[s._v("<src>")]),s._v(" 可以是 Dockerfile 所在目录的一个相对路径；也可以是一个 URL；还可以是一个 "),t("code",[s._v("tar")]),s._v(" 文件（自动解压为目录）。")]),s._v(" "),t("h3",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[s._v("#")]),s._v(" COPY")]),s._v(" "),t("p",[s._v("复制指令，从上下文目录中复制文件或者目录到容器里指定路径。")]),s._v(" "),t("p",[s._v("格式为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" <src> <dest>")]),s._v("\n")])])]),t("p",[s._v("复制本地主机的 "),t("code",[s._v("<src>")]),s._v("（为 Dockerfile 所在目录的相对路径）到容器中的 "),t("code",[s._v("<dest>")]),s._v("。")]),s._v(" "),t("p",[s._v("当使用本地目录为源目录时，推荐使用 COPY。")]),s._v(" "),t("h3",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[s._v("#")]),s._v(" VOLUME")]),s._v(" "),t("p",[s._v("定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。它可以避免重要的数据，因容器重启而丢失，也可以避免容器不断变大：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VOLUME")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<路径1>"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<路径2>"')]),s._v("...]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VOLUME")]),s._v(" <路径>")]),s._v("\n")])])]),t("p",[s._v("在启动容器的时候，我们可以通过 "),t("code",[s._v("-v")]),s._v(" 参数修改挂载点。")]),s._v(" "),t("h3",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[s._v("#")]),s._v(" CMD")]),s._v(" "),t("p",[s._v("为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。")]),s._v(" "),t("p",[s._v("类似于 RUN 指令，但 RUN 是在 "),t("code",[s._v("docker build")]),s._v(" 时运行，而 CMD 在 "),t("code",[s._v("docker run")]),s._v(" 时运行。")]),s._v(" "),t("p",[s._v("支持三种格式：")]),s._v(" "),t("ul",[t("li",[s._v("使用 exec 执行："),t("code",[s._v('CMD ["executable","param1","param2"]')])]),s._v(" "),t("li",[s._v("在 "),t("code",[s._v("/bin/sh")]),s._v(" 中执行，提供给需要交互的应用："),t("code",[s._v("CMD command param1 param2")])]),s._v(" "),t("li",[s._v("提供给 ENTRYPOINT 的默认参数："),t("code",[s._v('CMD ["param1","param2"]')])])]),s._v(" "),t("p",[s._v("如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。")]),s._v(" "),t("p",[s._v("::: waring")]),s._v(" "),t("p",[s._v("如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。")]),s._v(" "),t("p",[s._v(":::")]),s._v(" "),t("h3",{attrs:{id:"entrypoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[s._v("#")]),s._v(" ENTRYPOINT")]),s._v(" "),t("p",[s._v("配置容器启动后执行的命令。")]),s._v(" "),t("p",[s._v("与 CMD 不同，它不会被 "),t("code",[s._v("docker run")]),s._v(" 提供的参数覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"executable"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param1"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"param2"')]),s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" command param1 param2（shell 中执行）")]),s._v("\n")])])]),t("p",[s._v("如果运行 "),t("code",[s._v("docker run")]),s._v(" 时使用了 "),t("code",[s._v("--entrypoint")]),s._v(" 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。")]),s._v(" "),t("p",[s._v("::: waring")]),s._v(" "),t("p",[s._v("每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。")]),s._v(" "),t("p",[s._v(":::")]),s._v(" "),t("h3",{attrs:{id:"onbuild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[s._v("#")]),s._v(" ONBUILD")]),s._v(" "),t("p",[s._v("配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("ONBUILD [INSTRUCTION]")]),s._v("。")]),s._v(" "),t("p",[s._v("例如，Dockerfile 使用如下的内容创建了镜像 "),t("code",[s._v("image-P")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ONBUILD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app/src")]),s._v("\n")])])]),t("p",[s._v("新的 Dockerfile 中使用 "),t("code",[s._v("FROM image-A")]),s._v(" 指定基础镜像时，会自动执行 ONBUILD 指令内容，等价于在后面添加了一条指令：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" image-A")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Automatically run the following")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app/src")]),s._v("\n")])])]),t("h2",{attrs:{id:"案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[s._v("#")]),s._v(" 案例")]),s._v(" "),t("p",[s._v("自定义 "),t("code",[s._v("tomcat")]),s._v(" 镜像：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Kisstar <dwh.chn@foxmail.com>"')])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 Java 和 tomcat 到容器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" jdk-8u171-linux-x64.tar.gz /usr/local/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" apache-tomcat-9.0.8.tar.gz /usr/local/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置 Java 和 tomcat 环境变量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" JAVA_HOME /usr/local/jdk1.8.0_171")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" CLASSPATH "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/lib/dt.jar:"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/lib/tools.jar")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" CATALINA_HOME /usr/local/apache-tomcat-9.0.8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" CATALINA_BASE /usr/local/apache-tomcat-9.0.8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PATH "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PATH")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/bin:"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CATALINA_HOME")]),s._v("/lib:"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CATALINA_HOME")]),s._v("/bin")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" WD /usr/local")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置工作路径")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$WD")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装 vim 编辑器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum -y install vim")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器运行时监听的端口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v("  8080")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动时运行tomcat")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.8/bin/startup.sh" ]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out")]),s._v("\n")])])]),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dockerfile reference | Docker Documentation"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.runoob.com/docker/docker-dockerfile.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Dockerfile | 菜鸟教程"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://wiki.jikexueyuan.com/project/docker-technology-and-combat/instructions.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("指令 - Docker —— 从入门到实践 - 极客学院 Wiki"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);