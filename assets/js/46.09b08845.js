(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{457:function(t,s,a){"use strict";a.r(s);var e=a(62),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"继承-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承-2"}},[t._v("#")]),t._v(" 继承 2")]),t._v(" "),a("p",[t._v("继承是面向对象程序设计中最重要的一个概念。")]),t._v(" "),a("h2",{attrs:{id:"基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[t._v("#")]),t._v(" 基础概念")]),t._v(" "),a("p",[t._v("类用于指定对象的形式，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合。类中的数据称为成员变量，函数称为成员函数。")]),t._v(" "),a("p",[t._v("类可以被看作是一种模板，可以用来创建具有相同属性和行为的多个对象。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/images/c/basis/class-template.png"),alt:"class structrue"}}),t._v(" "),a("p",[t._v("继承允许我们依据另一个类来定义一个类，当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为基类，新建的类称为派生类。")]),t._v(" "),a("p",[t._v("继承代表了 is a 关系。例如，哺乳动物是动物，狗是哺乳动物，因此，狗是动物，等等。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/images/c/basis/class-inherit.png"),alt:"class inherit"}}),t._v(" "),a("h2",{attrs:{id:"对象的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[t._v("#")]),t._v(" 对象的创建")]),t._v(" "),a("p",[t._v("以下实例我们使用关键字 class 定义 Box 数据类型：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盒子的长度")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" breadth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盒子的宽度")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 盒子的高度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("基本上，对象是根据类来创建的。声明类的对象，就像声明基本类型的变量一样。下面的语句声明了类 Box 的两个对象：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Box Box1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 Box Box1，通过 . 访问成员，不需要手动释放内存")]),t._v("\n")])])]),a("p",[t._v("另外，也可以在堆上创建对象，语法如下：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Box"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" Box2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Box")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 -> 访问成员，需要手动释放内存")]),t._v("\n")])])]),a("p",[t._v("创建对象的时候，其实是需要在内存中开辟空间的（使用 new,就在堆上开辟空间，如果没有使用 new,就栈上开辟空间）：")]),t._v(" "),a("ul",[a("li",[t._v("如果类中是没有属性的，对象占用的空间大小也不是 0，而是 1；")]),t._v(" "),a("li",[t._v("如果类中是有属性的，所有的属性占用的空间大小的和。")])]),t._v(" "),a("h2",{attrs:{id:"访问权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问权限"}},[t._v("#")]),t._v(" 访问权限")]),t._v(" "),a("p",[t._v("类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private。")]),t._v(" "),a("p",[t._v("公有（public）成员在程序中类的外部是可访问的。")]),t._v(" "),a("p",[t._v("私有（private）成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有当前类和友元函数可以访问私有成员。")]),t._v(" "),a("p",[t._v("受保护（protected）成员变量或函数与私有成员十分相似，但有一点不同，protected（受保护）成员在当前类和派生类（即子类）中是可访问的。")]),t._v(" "),a("p",[t._v("一个类可以有多个 public、protected 或 private 标记区域。每个标记区域在下一个标记区域开始之前或者在遇到类主体结束右括号之前都是有效的。")]),t._v(" "),a("h2",{attrs:{id:"继承类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承类型"}},[t._v("#")]),t._v(" 继承类型")]),t._v(" "),a("p",[t._v("公有继承（public）：当一个类派生自公有基类时，基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。")]),t._v(" "),a("p",[t._v("保护继承（protected）：当一个类派生自保护基类时，基类的公有和保护成员将成为派生类的保护成员。")]),t._v(" "),a("p",[t._v("私有继承（private）：当一个类派生自私有基类时，基类的公有和保护成员将成为派生类的私有成员。")]),t._v(" "),a("h2",{attrs:{id:"多重继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多重继承"}},[t._v("#")]),t._v(" 多重继承")]),t._v(" "),a("p",[t._v("多继承即一个子类可以有多个父类，它继承了多个父类的特性。语法如下：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("派生类名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("继承方式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基类名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("继承方式"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("基类名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("…\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("派生类类体"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其中，访问修饰符继承方式是 public、protected 或 private 其中的一个，用来修饰每个基类，各个基类之间用逗号分隔。")]),t._v(" "),a("h2",{attrs:{id:"初步的疑惑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初步的疑惑"}},[t._v("#")]),t._v(" 初步的疑惑")]),t._v(" "),a("p",[t._v("在定义一个类时，在类的声明中直接写出方法体和单独定义方法之间，两者有什么区别？")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.runoob.com/cplusplus/cpp-classes-objects.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++ 类 & 对象 | 菜鸟教程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);