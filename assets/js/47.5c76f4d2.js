(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{462:function(t,v,_){"use strict";_.r(v);var l=_(62),e=Object(l.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),_("blockquote",[_("p",[t._v("每一个模式描述了一个在我们周围不断重复发送的问题，以及该问题的解决方法的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。 ——来自 Christopher Alexander")])]),t._v(" "),_("p",[t._v("深入理解面向对象：")]),t._v(" "),_("ul",[_("li",[t._v("向下，深入理解三大面向对象机制\n"),_("ul",[_("li",[t._v("封装，隐藏内部实现")]),t._v(" "),_("li",[t._v("继承，复用现有代码")]),t._v(" "),_("li",[t._v("多态，改写对象行为")])])]),t._v(" "),_("li",[t._v("向上，深刻把握面向对象机制所带来的的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”")])]),t._v(" "),_("p",[t._v("如何解决复杂性：")]),t._v(" "),_("ul",[_("li",[t._v("分解：分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。")]),t._v(" "),_("li",[t._v("抽象：由于不能掌握全部的复杂对象，我们选择忽略它的非本质细节，而去处理泛化和理想化了的对象模型。")])]),t._v(" "),_("p",[t._v("软件设计的目标：")]),t._v(" "),_("p",[t._v("什么是好的软件设计？软件设计的金科玉律：复用！")])])}),[],!1,null,null,null);v.default=e.exports}}]);