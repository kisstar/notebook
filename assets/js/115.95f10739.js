(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{530:function(s,a,t){"use strict";t.r(a);var e=t(62),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[s._v("#")]),s._v(" 镜像")]),s._v(" "),t("p",[s._v("镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件等。")]),s._v(" "),t("h2",{attrs:{id:"联合文件系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合文件系统"}},[s._v("#")]),s._v(" 联合文件系统")]),s._v(" "),t("p",[s._v("Docker 镜像是怎么实现增量的修改和维护的？每个镜像都由很多层次构成，Docker 使用联合文件系统（UnionFS）将这些不同的层结合到一个镜像中去。")]),s._v(" "),t("p",[s._v("联合文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。")]),s._v(" "),t("p",[s._v("所以说，联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。")]),s._v(" "),t("p",[s._v("而且，基于此不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。")]),s._v(" "),t("h2",{attrs:{id:"创建一个新的镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个新的镜像"}},[s._v("#")]),s._v(" 创建一个新的镜像")]),s._v(" "),t("p",[s._v("当我们从 Docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改:")]),s._v(" "),t("ul",[t("li",[s._v("从已经创建的容器中更新镜像，并且提交这个镜像")]),s._v(" "),t("li",[s._v("使用 Dockerfile 指令来创建一个新的镜像")])]),s._v(" "),t("h3",{attrs:{id:"更新、提交镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新、提交镜像"}},[s._v("#")]),s._v(" 更新、提交镜像")]),s._v(" "),t("p",[s._v("现在先来了解一下第一种方式，首先从 Hub 上拉取最新的 "),t("code",[s._v("tomcat")]),s._v(" 镜像到本地：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" pull tomcat\n")])])]),t("p",[s._v("接下来就是运行它。这里需要注意的是，在启动时我们需要将容器中的端口（比如：8080）映射到本地的端口（比如：80）以便于在本地访问：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":8080 tomcat\n")])])]),t("p",[s._v("除了上面的通过 "),t("code",[s._v("-p")]),s._v(" 来指定端口映射外，也可以直接使用 "),t("code",[s._v("-P")]),s._v(" 来指定随机映射，然后通过 "),t("code",[s._v("docker ps")]),s._v(" 来查看最后的映射关系。")]),s._v(" "),t("p",[s._v("假如上面我们启动的容器 ID 是 "),t("code",[s._v("5a88617e75e0")]),s._v("，现在进入这个容器中：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it 5a88617e75e0 /bin/bash\n")])])]),t("p",[s._v("在容器的 "),t("code",[s._v("/usr/local/tomcat/webapps/www")]),s._v(" 目录下添加 "),t("code",[s._v("index.html")]),s._v(" 文件并写入以下内容：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /usr/local/tomcat/webapps/www\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Docker</title>\n</head>\n<body>\n    <div>Hello Docker!</div>\n</body>\n</html>\'')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" webapps/www/index.html\n")])])]),t("p",[s._v("到此，你可以在宿主机中通过 "),t("code",[s._v("curl http://localhost/www/")]),s._v(" 来访问到上面的 HTML 内容。")]),s._v(" "),t("p",[s._v("我们已经完成了对容器的修改，下载可以通过命令 "),t("code",[s._v("docker commit")]),s._v(" 来提交容器副本。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CONTAINER "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":TAG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("常用选项：")]),s._v(" "),t("ul",[t("li",[s._v("-a: 提交的镜像作者")]),s._v(" "),t("li",[s._v("-m: 提交时的说明文字")]),s._v(" "),t("li",[s._v("-c: 使用 Dockerfile 指令来创建镜像")]),s._v(" "),t("li",[s._v("-p: 在 commit 时，将容器暂停")])]),s._v(" "),t("p",[s._v("熟悉 Git 的同学看起来应该很熟悉：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit -a "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Kisstar"')]),s._v(" -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Docker"')]),s._v(" 5a88617e75e0 kisstar/tomcat:1.0.0\n")])])]),t("p",[s._v("然后通过 "),t("code",[s._v("docker iamges")]),s._v(" 就可以看到生成的新的镜像，为进行验证我们先退出之前运行的容器，或者直接全部删除（请确认后执行）：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -aq"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])])]),t("p",[s._v("接着利用我们生成的镜像来创建一个新的容器：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":8080 kisstar/tomcat:1.0.0\n")])])]),t("p",[s._v("现在，无需添加 HTML 文件，通过 "),t("code",[s._v("curl http://localhost/www/")]),s._v(" 就可以直接看到上面的 HTML 内容。")]),s._v(" "),t("h3",{attrs:{id:"基于-dockerfile-创建新的镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于-dockerfile-创建新的镜像"}},[s._v("#")]),s._v(" 基于 Dockerfile 创建新的镜像")]),s._v(" "),t("p",[s._v("首先，创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。")]),s._v(" "),t("p",[s._v("这里自定义一个 "),t("code",[s._v("centos")]),s._v(" 镜像，改变启动后的默认路径，并使其支持 "),t("code",[s._v("vim")]),s._v(" 编辑器和 "),t("code",[s._v("ifconfig")]),s._v(" 等命令：")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" maintainer="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Kisstar <dwh.chn@foxmail.com>"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" WD /usr/local")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$WD")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum -y install vim")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum -y install net-tools")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" /bin/bash")]),s._v("\n")])])]),t("p",[s._v("每一个指令都会在镜像上创建一个新的层。")]),s._v(" "),t("p",[s._v("然后，我们使用 Dockerfile 文件，通过 "),t("code",[s._v("docker build")]),s._v(" 命令来构建一个镜像：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t kisstar/centos:1.0.0 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[s._v("现在，我们可以使用新的镜像来创建容器：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it kisstar/centos:1.0.0\n")])])]),t("h2",{attrs:{id:"推送本地镜像至阿里云"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送本地镜像至阿里云"}},[s._v("#")]),s._v(" 推送本地镜像至阿里云")]),s._v(" "),t("p",[s._v("仓库（Repository）是集中存放镜像的地方，目前 Docker 官方维护了一个公共仓库 "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Hub"),t("OutboundLink")],1),s._v("，大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。")]),s._v(" "),t("p",[s._v("以下介绍一下如何推送本地镜像至阿里云，与 Docker Hub 类似，只是远程的服务商不一样，操作都是一样的。")]),s._v(" "),t("p",[s._v("首先，前往阿里云控制台登录后选择容器镜像服务，然后点击创建镜像仓库。")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/images/docker/create-ali-repository.png"),alt:"create-ali-repository"}}),s._v(" "),t("p",[s._v("在第二步选择代码源时，直接选择本地镜像。")]),s._v(" "),t("p",[s._v("然后，在仓库列表中就可以看到我们新建的仓库。点击管理，在管理页面我们可以看到详细的操作指南。")]),s._v(" "),t("p",[s._v("推送时，使用用户名和密码进行登录：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" login registry.cn-beijing.aliyuncs.com\n")])])]),t("p",[s._v("登录成功后就可以开始推动我们的镜像了：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" tag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ImageId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" registry.cn-beijing.aliyuncs.com/kisstar/centos:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" push registry.cn-beijing.aliyuncs.com/kisstar/centos:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("推送成功后就可以拉取我们推送的镜像啦：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" pull registry.cn-beijing.aliyuncs.com/kisstar/centos:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("镜像版本号"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://wiki.jikexueyuan.com/project/docker-technology-and-combat/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker —— 从入门到实践-极客学院 Wiki"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);