(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{503:function(a,s,t){"use strict";t.r(s);var e=t(62),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[a._v("#")]),a._v(" 数据卷")]),a._v(" "),t("p",[a._v("数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：")]),a._v(" "),t("ul",[t("li",[a._v("数据卷可以在容器之间共享和重用")]),a._v(" "),t("li",[a._v("对数据卷的修改会立马生效")]),a._v(" "),t("li",[a._v("对数据卷的更新，不会影响镜像")]),a._v(" "),t("li",[a._v("卷会一直存在，直到没有容器使用（数据卷的使用，类似于 Linux 下对目录或文件进行 mount）")])]),a._v(" "),t("h2",{attrs:{id:"通过-v-参数创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过-v-参数创建"}},[a._v("#")]),a._v(" 通过 -v 参数创建")]),a._v(" "),t("p",[a._v("在用 "),t("code",[a._v("docker run")]),a._v(" 命令的时候，可以使用 "),t("code",[a._v("-v")]),a._v(" 标记来创建一个数据卷并挂载到容器里（同时创建多个也是可以的）：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -d --name web -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":8080 -v /data/www:/usr/local/tomcat/webapps/www tomcat\n")])])]),t("p",[a._v("现在，容器中的 "),t("code",[a._v("/data/www:/usr/local/tomcat/webapps/www")]),a._v(" 目录就像是宿主机 "),t("code",[a._v("/data/www")]),a._v(" 目录的软链接一样。你在其中一个目录中执行创建、删除等操作，结果都会实时的反应在另一个中。")]),a._v(" "),t("p",[a._v("比如执行上面的操作后，我们在宿主的 "),t("code",[a._v("/data/www")]),a._v(" 目录中添加文件：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello Docker"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" /data/www/index.html\n")])])]),t("p",[a._v("借助 "),t("code",[a._v("curl")]),a._v(" 访问 "),t("code",[a._v("http://localhost/www/index.html")]),a._v(" 将会返回 “Hello Docker”，因为上面创建的文件同步出现在了容器的 tomcat 静态目录下，因此可以被访问。通过执行下面的命令可以证明这一点：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -t web "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /usr/local/tomcat/webapps/www/index.html\nHello Docker\n")])])]),t("p",[a._v("::: info")]),a._v(" "),t("p",[a._v("如果关闭容器，再对宿主机的的 "),t("code",[a._v("/data/www")]),a._v(" 目录进行操作。当容器再次启动时，期间的改动将会同步反应在容器的目录中。")]),a._v(" "),t("p",[a._v(":::")]),a._v(" "),t("p",[a._v("在创建数据卷时，Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -d --name web -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":8080 -v /data/www:/usr/local/tomcat/webapps/www:ro tomcat\n")])])]),t("p",[a._v("此时，若再在容器中操作 "),t("code",[a._v("/data/www:/usr/local/tomcat/webapps/www")]),a._v(" 目录下的内容将会得到提示：Read only file system。当然在宿主机中仍然可以做操作。")]),a._v(" "),t("h2",{attrs:{id:"通过-dockerfile-创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过-dockerfile-创建"}},[a._v("#")]),a._v(" 通过 Dockerfile 创建")]),a._v(" "),t("p",[a._v("在 Dockerfile 中，通过 VOLUME 指令可以定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。格式：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("VOLUME "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<路径1>"')]),a._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<路径2>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nVOLUME "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("路径"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("p",[a._v("首先，在宿主机的 "),t("code",[a._v("/docker")]),a._v(" 目录下创建一个 Dockerfile 文件，并写入下面的基础内容：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /docker "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$_")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'FROM centos\nVOLUME ["/tmp/dataVolume_one","/tmp/dataVolume_two"]\nCMD /bin/bash\'')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" Dockerfile\n")])])]),t("p",[a._v("接着使用 "),t("code",[a._v("docker build")]),a._v(" 命令来基于 Dockerfile 创建镜像：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build -t kisstar/centos:1.0.0 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n\nSending build context to Docker daemon  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(".048kB\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("/3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" FROM centos\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 831691599b88\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("/3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" VOLUME "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/tmp/dataVolume_one"')]),a._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/tmp/dataVolume_two"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" e3ca9bd4014a\nRemoving intermediate container e3ca9bd4014a\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 40202e1af100\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("/3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" CMD /bin/bash\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" bf0ca092dfea\nRemoving intermediate container bf0ca092dfea\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 133e560aaf0d\nSuccessfully built 133e560aaf0d\nSuccessfully tagged kisstar/centos:1.0.0\n")])])]),t("p",[a._v("根据返回的镜像 ID 运行构建好的新镜像：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -it 133e560aaf0d\n")])])]),t("p",[a._v("在容器中可以看见对应的目录已经存在其中：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" /tmp/\n\ndataVolume_one  dataVolume_two\n")])])]),t("p",[a._v("通过 "),t("code",[a._v("docker inspect")]),a._v(" 查看容器信息：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" inspect 133e560aaf0d\n")])])]),t("p",[a._v("在对应的 Mounts 字段下可以看到对应的主机目录。")]),a._v(" "),t("h2",{attrs:{id:"数据卷容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器"}},[a._v("#")]),a._v(" 数据卷容器")]),a._v(" "),t("p",[a._v("数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。")]),a._v(" "),t("p",[a._v("也就是说，命名的容器挂载数据卷，其它容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。")]),a._v(" "),t("p",[a._v("首先，创建一个命名的数据卷容器 "),t("code",[a._v("gc")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -t -d --name gc kisstar/centos:1.0.0\n")])])]),t("p",[a._v("按照我们前面的设置，现在在 "),t("code",[a._v("gc")]),a._v(" 容器中已经拥有了两个容器卷，通过 "),t("code",[a._v("docker inspect")]),a._v(" 可以查看到它们对应的主机目录。")]),a._v(" "),t("p",[a._v("接着，在其他容器中使用 "),t("code",[a._v("--volumes-from")]),a._v(" 来挂载 "),t("code",[a._v("gc")]),a._v(" 容器中的数据卷：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -t -d --volumes-from gc --name pc kisstar/centos:1.0.0\n")])])]),t("p",[a._v("再次通过 "),t("code",[a._v("docker inspect")]),a._v(" 查看 "),t("code",[a._v("pc")]),a._v(" 容器中数据卷对应的主机目录，会发现和 "),t("code",[a._v("gc")]),a._v(" 容器中两个数据卷的对应的主机目录是对应相同的。")]),a._v(" "),t("p",[a._v("以个人理解来讲，在使用 "),t("code",[a._v("--volumes-from")]),a._v(" 来挂载 "),t("code",[a._v("gc")]),a._v(" 容器中的数据卷时，其实就是将其对应的主机目录再做一次软连接到自己的数据卷。如此以来我们在其中一个地方修改数据，其它地方都可以实时的收到改变的内容。")]),a._v(" "),t("p",[a._v("当然，可以有多个容器挂载到同一个容器：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -t -d --volumes-from gc --name pc2 kisstar/centos:1.0.0\n")])])]),t("p",[a._v("另外，也可以使用多个 "),t("code",[a._v("--volumes-from")]),a._v(" 参数来从多个容器挂载多个数据卷。 也可以从其他已经挂载了数据卷的容器来挂载数据卷：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -t -d --volumes-from pc2 --name sc kisstar/centos:1.0.0\n")])])]),t("p",[a._v("操作看起来有点像面向对象中的继承，但其实用软连接的方式来理解更为容易。通过 "),t("code",[a._v("docker inspect")]),a._v(" 我们可以发现其实它们对应的宿主机目录都是相同的，容器中的数据卷相当于都是一些软连接。")]),a._v(" "),t("p",[a._v("这样也就好理解如果删除了挂载的容器（包括 gc、pc 和 pc2），数据卷并不会被自动删除。数据卷的生命周期会持续到没有容器使用它为止。")]),a._v(" "),t("p",[a._v("如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 "),t("code",[a._v("docker rm -v")]),a._v(" 命令来指定同时删除关联的容器。这可以让用户在容器之间升级和移动数据卷。")]),a._v(" "),t("h2",{attrs:{id:"备份、恢复、迁移数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#备份、恢复、迁移数据卷"}},[a._v("#")]),a._v(" 备份、恢复、迁移数据卷")]),a._v(" "),t("p",[a._v("通过数据卷，我们可以对其中的数据进行进行备份、恢复和迁移。")]),a._v(" "),t("p",[t("strong",[a._v("备份")]),a._v("：")]),a._v(" "),t("p",[a._v("使用数据卷来备份数据时，通过指定本地的一个文件路径，对应到容器中的路径，然后运行 "),t("code",[a._v("tar")]),a._v(" 命令将重要的文件打包备份。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run --name db1 --volumes-from dbdata -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(":/backup centos "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" cvf /backup/backup.tar /dbdata\n")])])]),t("p",[a._v("如上先使用 "),t("code",[a._v("--volumes-from")]),a._v(" 标记来创建一个加载 "),t("code",[a._v("dbdata")]),a._v(" 容器卷的容器，并从本地主机挂载当前到容器的 "),t("code",[a._v("/backup")]),a._v(" 目录。")]),a._v(" "),t("p",[a._v("在容器启动后，使用了 "),t("code",[a._v("tar")]),a._v(" 命令来将 "),t("code",[a._v("dbdata")]),a._v(" 卷备份为本地的 "),t("code",[a._v("/backup/backup.tar")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("恢复")]),a._v("：")]),a._v(" "),t("p",[a._v("恢复数据到一个容器的操作和备份很类似，首先创建一个带有数据卷的容器：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run -v /dbdata --name db2 centos /bin/bash\n")])])]),t("p",[a._v("然后创建另一个容器，挂载 "),t("code",[a._v("db2")]),a._v(" 的容器，并解压备份文件到挂载的容器卷中：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run --volumes-from db2 -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(":/backup busybox "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" xvf /backup/backup.tar\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);