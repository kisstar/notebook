(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{534:function(a,t,s){"use strict";s.r(t);var e=s(62),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"深入-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入-git"}},[a._v("#")]),a._v(" 深入 Git")]),a._v(" "),s("p",[a._v("从零开始，了解 Git 是如何工作的。")]),a._v(" "),s("h2",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),s("p",[a._v("创建工作目录。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~ $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" alpha\n~ $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" alpha\n\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" data\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/letter.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# alpha")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# └── data")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#     └── letter.txt")]),a._v("\n")])])]),s("p",[a._v("初始化仓库。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" init\n")])])]),s("p",[a._v("初始化过程中创建一个 "),s("code",[a._v(".git")]),a._v(" 目录并向其中写入一些文件。这些文件定义了关于 "),s("code",[a._v("Git")]),a._v(" 配置和项目历史的所有内容。如若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可。")]),a._v(" "),s("p",[a._v("其实，它们也只是一些普通的文件，并没有什么神奇之处。用户可以使用文本编辑器或 "),s("code",[a._v("shell")]),a._v(" 来读取和编辑它们。也就是说：用户可以像读取项目文件一样轻松地读取和编辑项目的历史记录。")]),a._v(" "),s("p",[a._v("现在整个项目的目录看起来是这样的：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("alpha\n├── data\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   └── letter.txt\n└── .git\n    ├── objects/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 存储所有数据内容")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   ├── pack\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   └── info\n    ├── HEAD "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指向目前被检出的分支")]),a._v("\n    ├── config*\n    ├── description\n    ├── hooks/\n    ├── info/\n    ├── refs/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 存储指向数据（分支）的提交对象的指针")]),a._v("\n    etc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),s("p",[a._v("该目录下可能还会包含其他文件，不过对于一个全新的 "),s("code",[a._v("git init")]),a._v(" 版本库，这将是你看到的默认结构。")]),a._v(" "),s("h2",{attrs:{id:"暂存区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存区"}},[a._v("#")]),a._v(" 暂存区")]),a._v(" "),s("p",[a._v("接下来，使用 "),s("code",[a._v("git add")]),a._v(" 命令将 "),s("code",[a._v("letter.txt")]),a._v(" 添加到暂存区。首先，它会在 "),s("code",[a._v(".git/objects/")]),a._v(" 目录中创建一个新的 "),s("code",[a._v("blob")]),a._v(" 文件，此文件中包含了 "),s("code",[a._v("data/letter.txt")]),a._v(" 的压缩内容。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/letter.txt\n")])])]),s("p",[a._v("对应文件的名字则是将待存储的数据外加一个头部信息（header）一起做 "),s("code",[a._v("SHA-1")]),a._v(" 校验运算而得的校验和去掉前两个字符而得到，然后会在 "),s("code",[a._v("objects")]),a._v(" 目录下创建一个以校验和前两个字符命名的子目录来存放该文件。")]),a._v(" "),s("p",[a._v("你可以通过命令来查看这个完整的校验和：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" ls-files --stage\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 78981922613b2afb6025042ff6bd878ac1994e85 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/letter.txt\n")])])]),s("p",[a._v("因为已经在 "),s("code",[a._v("Git")]),a._v(" 中已经保存了完整的 "),s("code",[a._v("letter.txt")]),a._v(" 文件，所以即使删除工作目录中的 "),s("code",[a._v("letter.txt")]),a._v(" 文件，依然能够从 "),s("code",[a._v("Git")]),a._v(" 中检出。")]),a._v(" "),s("p",[a._v("你可以根据上面的 "),s("code",[a._v("SHA-1")]),a._v(" 值来通过命令查看其中保存的内容：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 78981922613b2afb6025042ff6bd878ac1994e85\n")])])]),s("p",[a._v("其次，"),s("code",[a._v("git add")]),a._v(" 会将文件添加到索引中。索引是一个列表，其中包含 "),s("code",[a._v("Git")]),a._v(" 被要求跟踪的每个文件。它作为文件存储在 "),s("code",[a._v(".git/index")]),a._v(" 中。文件的每一行都将一个被跟踪的文件映射到其内容添加时的哈希值。")]),a._v(" "),s("p",[a._v("这是运行 "),s("code",[a._v("git add")]),a._v(" 命令后的索引:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ xxd .git/index\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("44")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("49")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("52")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),a._v(" 00 00 00 02 00 00 00 01 5e "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" b0 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("66")]),a._v("\n08 e3 fc "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("58")]),a._v(" 5e "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" b0 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("66")]),a._v(" 08 e3 fc "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("58")]),a._v(" 00 00 00 00\n00 00 00 00 00 00 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("81")]),a._v(" a4 00 00 00 00 00 00 00 00\n00 00 00 02 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("98")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("61")]),a._v(" 3b 2a fb "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("60")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v(" 04 2f\nf6 bd "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("87")]),a._v(" 8a c1 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("99")]),a._v(" 4e "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("85")]),a._v(" 00 0f "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("61")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("61")]),a._v(" 2f 6c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("65")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("65")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("72")]),a._v(" 2e "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("74")]),a._v(" 00 00 00 2c e9 03 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v("\nde 7e 8e 2a "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dd")]),a._v(" 3e "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("26")]),a._v(" b5 6a 1a "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("31")]),a._v(" e2 fe "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("81")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("57")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 44 49 52 43 值为 DIRC（意为 DirCache），标识该文件是否是合法的索引文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000002 值为 2，标识索引文件的版本，当前版本为 2.x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000001 值为 1，无符号整数，标识了索引的文件数目")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 5e42b066 08e3fc58 标识了文件的创建时间")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 5e42b066 表示 Unix 时间，单位为秒")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 08e3fc58 表示微秒")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 5e42b066 08e3fc58 标识了文件的最后修改时间")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 5e42b066 表示 Unix 时间，单位为秒")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 08e3fc58 表示微秒")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000000 设备编号，由于当前测试的 Windows 系统不支持，所以置为零")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000000 表示 inode 编号")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 由于当前测试的 Windows 系统不支持，所以置为零")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 溢出的 bit 被裁切。在 Git 中唯一作用就是检测文件是否修改，因此没有采用 64 位的")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 000081a4 表示文件模式")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 000081a4 转换为二进制为 00000000000000001000000110100100，从后向前数，每三位代表一个权限，也就是 644")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 剩余的表示文件类型，也就是 100，表示 regular file：https://www.cnblogs.com/lienhua34/p/3950458.html")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000000 所属用户 UID")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000000 所属用户组 GID")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 00000002 表示文件大小，也就是 2 字节")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 78981922613b2afb6025042ff6bd878ac1994e85 表示 SHA-1 值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 000f 转为二进制")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1 位假定不变标识：0 表示跟踪所有变更，1 表示忽略所有变更")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1 位扩展标识：该标识在当前索引文件版本（版本2）中无意义，被置 0")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 2 位阶段标识：该标识在合并分支的时候使用，可以通过 git ls-files --stage 命令获取。普通（未合并）文件通常为 0")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 12 位文件名长度：最长支持到 4095位（0xFFF），溢出部分将被忽视")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 646174612f6c65747465722e747874 若干字节的文件路径")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 分隔符？")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 校验值？")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# etc...")]),a._v("\n")])])]),s("p",[a._v("可见里面包含了文件信息、"),s("code",[a._v("SHA-1")]),a._v(" 值等信息，再来创建一个新的文件，写入 '1234'，并将其添加到仓库中：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'1234'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data\n")])])]),s("p",[a._v("我们可以通过上面的命令来直接查看相关的关键信息：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" ls-files --stage\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 78981922613b2afb6025042ff6bd878ac1994e85 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" d00491fd7e5bb6fa28c517a0bb32b8b506539d4d "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/number.txt\n")])])]),a._v(" "),s("p",[a._v("紧接着我们把 "),s("code",[a._v("data/number.txt")]),a._v(" 中的内容改为 “1”，再添加到仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'1'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data\n")])])]),s("p",[a._v("结果会根据新的内容创建新的 "),s("code",[a._v("blob")]),a._v(" 对象，更新 "),s("code",[a._v("data/number.txt")]),a._v(" 的索引项以指向新的对象。")]),a._v(" "),s("h2",{attrs:{id:"首次提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首次提交"}},[a._v("#")]),a._v(" 首次提交")]),a._v(" "),s("p",[a._v("现在来进行一次提交操作：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a1'")]),a._v("\n")])])]),s("p",[a._v("执行上面的命令主要会完成三件事情，首先创建一个树图来表示提交的项目版本内容。")]),a._v(" "),s("p",[a._v("所有内容均以树对象和数据对象的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 "),s("code",[a._v("inodes")]),a._v(" 或文件内容。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# letter.txt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/78/981922613b2afb6025042ff6bd878ac1994e85")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 78981922613b2afb6025042ff6bd878ac1994e85\na\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# number.txt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/d0/0491fd7e5bb6fa28c517a0bb32b8b506539d4d")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p d00491fd7e5bb6fa28c517a0bb32b8b506539d4d\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("每一个树对象包含了一条或多条树对象记录（tree entry），每条记录含有一个指向数据对象或者子树对象的 "),s("code",[a._v("SHA-1")]),a._v(" 指针，以及相应的模式、类型、文件名信息。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 树记录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/89/29f1d99ae7ad510c084efe4babc036c6dbb8cb")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 8929f1d99ae7ad510c084efe4babc036c6dbb8cb\n040000 tree 23e3db4885d1e39c4c55d7e1b7d27206f5bbf15e    data\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 树对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/23/e3db4885d1e39c4c55d7e1b7d27206f5bbf15e")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 23e3db4885d1e39c4c55d7e1b7d27206f5bbf15e\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" blob 78981922613b2afb6025042ff6bd878ac1994e85    letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" blob d00491fd7e5bb6fa28c517a0bb32b8b506539d4d    number.txt\n")])])]),s("p",[a._v("然后创建一个 "),s("code",[a._v("commit")]),a._v(" 对象，其中包含了本次提交的关键信息，包括提交者、提交描述、提交时间以及对应的树对象等信息。")]),a._v(" "),s("p",[a._v("和前面的文件存储相同，都被保存在 "),s("code",[a._v(".git/objects")]),a._v(" 目录中。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/de/62b89f98d320c682d9f2e6f77a466e63b9f347")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p de62b89f98d320c682d9f2e6f77a466e63b9f347\ntree 8929f1d99ae7ad510c084efe4babc036c6dbb8cb\nauthor dongwanhong "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dongwhchn@163.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1581519078")]),a._v(" +0800\ncommitter dongwanhong "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dongwhchn@163.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1581519078")]),a._v(" +0800\n\na1\n")])])]),s("p",[a._v("最后，将当前分支指向新的提交对象。")]),a._v(" "),s("p",[a._v("那么哪个是当前的分支呢？在 "),s("code",[a._v("Git")]),a._v(" 中分支其实就是一个指向提交对象的别名，而当前分支就被保存在 "),s("code",[a._v(".git/HEAD")]),a._v(" 中。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" .git/HEAD\nref: refs/heads/master\n")])])]),s("p",[a._v("这意味着当前处于 "),s("code",[a._v("master")]),a._v(" 分支，而 HEAD 和 master 其实都是一个引用（简单理解为上面说的别名），它们的真身实际上被保存在 "),s("code",[a._v(".git/refs/heads")]),a._v(" 目录下。")]),a._v(" "),s("p",[a._v("每一个分支都会在该目录中创建一个与分支同名的文件，而文件内容就是该分支指向的提交对象的 "),s("code",[a._v("SHA-1")]),a._v(" 值。我们目前只有一次提交，所以显然当前的 "),s("code",[a._v("master")]),a._v(" 分支就指向了这次提交。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" .git/refs/heads/master\nde62b89f98d320c682d9f2e6f77a466e63b9f347\n")])])]),s("p",[a._v("到此，我们已经理清了运行 "),s("code",[a._v("git add")]),a._v(" 和 "),s("code",[a._v("git commit")]),a._v(" 命令时， "),s("code",[a._v("Git")]),a._v(" 所做的实质工作——将被改写的文件保存为数据对象，更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。")]),a._v(" "),s("p",[a._v("数据对象、树对象、提交对象——最初均以单独文件的形式保存在 "),s("code",[a._v(".git/objects")]),a._v(" 目录中。")]),a._v(" "),s("h2",{attrs:{id:"再次提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再次提交"}},[a._v("#")]),a._v(" 再次提交")]),a._v(" "),s("p",[a._v("现在工作区、暂存区和版本库中都有着 "),s("code",[a._v("data/letter.txt")]),a._v(" 和 "),s("code",[a._v("data/number.txt")]),a._v(" 一模一样的内容，不同的是暂存区和版本库中的内容都以 "),s("code",[a._v("blob")]),a._v(" 对象的形式保存在 "),s("code",[a._v(".git/objects")]),a._v(" 目录中。")]),a._v(" "),s("p",[a._v("再次更改一下 "),s("code",[a._v("data/number.txt")]),a._v(" 文件中的内容：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'2'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n")])])]),s("p",[a._v("显然，工作区的内容不再与暂存区和版本库中的内容相同了，那么更新一下暂存区：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n")])])]),s("p",[a._v("发生了什么呢？"),s("code",[a._v("Git")]),a._v(" 将根据暂存区中的内容在 "),s("code",[a._v(".git/objects")]),a._v(" 目录下新建一个 "),s("code",[a._v("blob")]),a._v(" 对象，并同时更新 "),s("code",[a._v("index")]),a._v(" 指向这个新的索引。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# number.txt")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/0c/fbf08886fca9a91cb753ec8734c84fcbe52c9f")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 0cfbf08886fca9a91cb753ec8734c84fcbe52c9f\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("p",[a._v("那么再做一次提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a2'")]),a._v("\n")])])]),s("p",[a._v("接下来的工作就和前面一样，首先根据暂存区中的内容创建一个图树，期间会新建一个树对象、树记录来映射整个暂存区的快照。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 树记录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/2d/798b26837fd4b198a3cc0c95084032be8ea42d")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p 2d798b26837fd4b198a3cc0c95084032be8ea42d\n040000 tree a2d2b3fada83eb0f8f02187fd7ee6a111391d700    data\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 树对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/a2/d2b3fada83eb0f8f02187fd7ee6a111391d700")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p a2d2b3fada83eb0f8f02187fd7ee6a111391d700\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" blob 78981922613b2afb6025042ff6bd878ac1994e85    letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" blob 0cfbf08886fca9a91cb753ec8734c84fcbe52c9f    number.txt\n")])])]),s("p",[a._v("同时，也会创建一个提交对象：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 提交对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# .git/objects/f1/8e64b0d7afd37701a31f71fef2af21bf955d8a")]),a._v("\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cat-file -p f18e64b0d7afd37701a31f71fef2af21bf955d8a\ntree 2d798b26837fd4b198a3cc0c95084032be8ea42d\nparent de62b89f98d320c682d9f2e6f77a466e63b9f347\nauthor dongwanhong "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dongwhchn@163.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1581652911")]),a._v(" +0800\ncommitter dongwanhong "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dongwhchn@163.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1581652911")]),a._v(" +0800\n\na2\n")])])]),s("p",[a._v("和第一个提交对象不同的时，该提交对象的第二行指向了它的父级提交对象。为了找到父提交，"),s("code",[a._v("Git")]),a._v(" 先找到 HEAD，跟随它到 "),s("code",[a._v("master")]),a._v("，找到了 "),s("code",[a._v("a1")]),a._v(" 的提交散列。")]),a._v(" "),s("p",[a._v("最后，就是将 "),s("code",[a._v("master")]),a._v(" 分支的指向移动最新的提交。")]),a._v(" "),s("h2",{attrs:{id:"分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[a._v("#")]),a._v(" 分析")]),a._v(" "),s("p",[a._v("我们先整理一下前面的所有数据，把它们绘制在一张图形中，所有关系清晰可见。")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("a2")]),a._v(" 提交中引用了 "),s("code",[a._v("a1")]),a._v(" 提交中的数据对象（data/letter.txt），也就是说在 "),s("code",[a._v("Git")]),a._v(" 的树对象中，存储数据只存储差异。类似地，如果整个目录在两次提交中没有变化，那么它的树以及它下面的所有 "),s("code",[a._v("blob")]),a._v(" 和树都可以重用。")]),a._v(" "),s("p",[a._v("除了首次提交外，每个提交都有一个父级，如此以来存储库就存储项目的历史记录。")]),a._v(" "),s("p",[s("code",[a._v("Git")]),a._v(" 用一个文件来保存 "),s("code",[a._v("SHA-1")]),a._v(" 值，并给文件起一个简单的名字，然后用这个名字指针来替代原始的 "),s("code",[a._v("SHA-1")]),a._v(" 值，而这样的文件被称为 “引用”。 "),s("code",[a._v("Git")]),a._v(" 使用 HEAD、MERGE-HEAD 和 FETCH-HEAD 等符号引用来支持操作提交历史记录的命令。")]),a._v(" "),s("p",[a._v("对象/目录中的节点是不可变的。这意味着内容是编辑的，而不是删除的。每次添加的内容和提交的内容都在 "),s("code",[a._v(".git/objects")]),a._v(" 目录中的某个位置。")]),a._v(" "),s("h2",{attrs:{id:"检出提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检出提交"}},[a._v("#")]),a._v(" 检出提交")]),a._v(" "),s("p",[a._v("检出提交 "),s("code",[a._v("a2")]),a._v("，也就是第二次提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout f18e64b\n")])])]),s("p",[a._v("我们通过其散列签出该次提交，将陆续进行四个步骤。首先，"),s("code",[a._v("Git")]),a._v(" 获取 "),s("code",[a._v("a2")]),a._v(" 提交并获取它指向的树图。")]),a._v(" "),s("p",[a._v("其次，它将树图中的文件项写入工作区。这不会导致任何变化，因为工作副本已经有正在写入的树图的内容。")]),a._v(" "),s("p",[a._v("接着，"),s("code",[a._v("Git")]),a._v(" 将树图中的文件项写入索引。这也不会导致任何变化。索引也已经具有 "),s("code",[a._v("a2")]),a._v(" 提交的内容。")]),a._v(" "),s("p",[a._v("最后，HEAD 的内容被设置为 "),s("code",[a._v("a2")]),a._v(" 提交的散列，所以此时仓库将处于 'detached HEAD' 状态。")]),a._v(" "),s("p",[a._v("此时，我们再修改一下 "),s("code",[a._v("data/number.txt")]),a._v(" 文件，并进行提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'3'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a3'")]),a._v("\n")])])]),s("p",[a._v("和前面的工作流程一样，不同的是去 HEAD 获取 "),s("code",[a._v("a3")]),a._v(" 提交父提交时，不再查找并跟踪分支引用，而是直接找到 HEAD 并返回 "),s("code",[a._v("a2")]),a._v(" 提交的散列。")]),a._v(" "),s("p",[a._v("同时 "),s("code",[a._v("Git")]),a._v(" 会更新 HEAD，直接指向新 "),s("code",[a._v("a3")]),a._v(" 提交的散列。目前存储库仍处于分离头状态。由于它不在分支上，且在 "),s("code",[a._v("a3")]),a._v(" 或其子代中没有提交点，这意味着很容易失去。")]),a._v(" "),s("h2",{attrs:{id:"切换分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[a._v("#")]),a._v(" 切换分支")]),a._v(" "),s("p",[a._v("现在创建一个名为 "),s("code",[a._v("deputy")]),a._v(" 的分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch deputy\n")])])]),s("p",[a._v("结果会创建一个 "),s("code",[a._v(".git/refs/heads/deputy")]),a._v(" 文件来存储当前 HEAD 的指向，也就是 "),s("code",[a._v("a3")]),a._v(" 提交对象的 "),s("code",[a._v("SHA-1")]),a._v(" 值。")]),a._v(" "),s("p",[a._v("分支的创建使得 "),s("code",[a._v("a3")]),a._v(" 提交变得安全，而不用担心迷失。不过仓库此时仍然处于游离状态，因为 HEAD 指向的仍然直接指向了提交。")]),a._v(" "),s("p",[a._v("现在切换一下分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),s("p",[a._v("和检出提交的步骤一样（分支就是指向提交的指针），首先 "),s("code",[a._v("Git")]),a._v(" 获取 "),s("code",[a._v("master")]),a._v(" 指向的 "),s("code",[a._v("a2")]),a._v(" 提交，并获取提交指向的树图。")]),a._v(" "),s("p",[a._v("其次，"),s("code",[a._v("Git")]),a._v(" 将树图中的文件条目写入工作副本的文件中。这将 "),s("code",[a._v("data/number.txt")]),a._v(" 的内容设置为 2。")]),a._v(" "),s("p",[a._v("第三，"),s("code",[a._v("Git")]),a._v(" 将树图中的文件项写入索引。这会将 "),s("code",[a._v("data/number.txt")]),a._v(" 的条目更新为 2 对应的 "),s("code",[a._v("blob")]),a._v(" 的哈希值。")]),a._v(" "),s("p",[a._v("第四，"),s("code",[a._v("Git")]),a._v(" 将 HEAD 内容从散列值更改为：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("ref: refs/heads/master\n")])])]),s("h2",{attrs:{id:"检出工作区不兼容的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检出工作区不兼容的分支"}},[a._v("#")]),a._v(" 检出工作区不兼容的分支")]),a._v(" "),s("p",[a._v("向 "),s("code",[a._v("number.txt")]),a._v(" 文件中写入新的内容，然后直接检出 "),s("code",[a._v("deputy")]),a._v(" 分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'789'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout deputy\n")])])]),s("p",[a._v("由于 "),s("code",[a._v("number.txt")]),a._v(" 在 HEAD 实际指向的是 "),s("code",[a._v("a2")]),a._v(" 的提交中是 2，在 "),s("code",[a._v("deputy")]),a._v(" 分支实际指向的是 "),s("code",[a._v("a3")]),a._v(" 的提交中是 3，而在工作区中则是 789。所有这些版本都不同，于是 "),s("code",[a._v("Git")]),a._v(" 阻止了检出，现在必须解决这些差异。")]),a._v(" "),s("p",[a._v("最简单的就是丢弃掉工作区的修改：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'2'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout deputy\n")])])]),s("p",[a._v("我们将 "),s("code",[a._v("number.txt")]),a._v(" 的内容重置为了 2，再次切换分支成功。")]),a._v(" "),s("h2",{attrs:{id:"合并祖先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并祖先"}},[a._v("#")]),a._v(" 合并祖先")]),a._v(" "),s("p",[a._v("合并 "),s("code",[a._v("master")]),a._v(" 到当前分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge master\n")])])]),s("p",[a._v("合并两个分支意味着合并两个提交。第一个提交是当前分支指向的：接收者。第二个提交是 "),s("code",[a._v("master")]),a._v(" 指向的：给予者。对于这个合并，"),s("code",[a._v("Git")]),a._v(" 什么也不做，仅申明它已经是最新的。")]),a._v(" "),s("p",[a._v("也就是说，当合并中给予者是接收者的祖先的话，那么 "),s("code",[a._v("Git")]),a._v(" 就什么也不做，因为这些变化都已经存在接收者中了。")]),a._v(" "),s("h2",{attrs:{id:"合并后代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并后代"}},[a._v("#")]),a._v(" 合并后代")]),a._v(" "),s("p",[a._v("将分支切换到 "),s("code",[a._v("master")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n")])])]),s("p",[a._v("然后合并 "),s("code",[a._v("deputy")]),a._v(" 到当前分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge deputy\n")])])]),s("p",[s("code",[a._v("Git")]),a._v(" 检查到合并中给予者是接收者的后代，所以将会进行一次快速合并。合并过程中，由于给予者已经有一个提交序列描述要进行的更改：接收者和给予者之间的提交序列，所以 "),s("code",[a._v("Git")]),a._v(" 的历史不会发生改变。")]),a._v(" "),s("p",[a._v("尽管 "),s("code",[a._v("Git")]),a._v(" 的历史没有改变，但是 "),s("code",[a._v("Git")]),a._v(" 的 HEAD 指向的具体引用将更新为指向给予者的提交。")]),a._v(" "),s("h2",{attrs:{id:"合并来自不同血统的两个提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并来自不同血统的两个提交"}},[a._v("#")]),a._v(" 合并来自不同血统的两个提交")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("master")]),a._v(" 分支上修改 "),s("code",[a._v("number.txt")]),a._v(" 并进行提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'4'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a4'")]),a._v("\n")])])]),s("p",[a._v("然后，切换到 "),s("code",[a._v("deputy")]),a._v(" 分支修改 "),s("code",[a._v("letter.txt")]),a._v(" 并提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout deputy\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/letter.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/letter.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b3'")]),a._v("\n")])])]),s("p",[a._v("再将 "),s("code",[a._v("master")]),a._v(" 分支合并到当前分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge master -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b4'")]),a._v("\n")])])]),s("p",[a._v("首先，"),s("code",[a._v("Git")]),a._v(" 发现接收者 "),s("code",[a._v("b3")]),a._v(" 和给予者 "),s("code",[a._v("a4")]),a._v(" 有着不同的血统，就会把（接受者的提交写入 alpha/.Git/ORIG_HEAD？）给予者提交的散列写入 "),s("code",[a._v("alpha/.Git/MERGE_HEAD")]),a._v(" 处的文件。")]),a._v(" "),s("p",[a._v("其次，"),s("code",[a._v("Git")]),a._v(" 找到基本提交：接收者和给予者提交的最新的共同祖先。")]),a._v(" "),s("p",[a._v("第三，"),s("code",[a._v("Git")]),a._v(" 从基提交、接收方提交和给定方提交的树图中生成索引。")]),a._v(" "),s("p",[a._v("第四，"),s("code",[a._v("Git")]),a._v(" 生成一个 "),s("code",[a._v("diff")]),a._v("，它将接收者和给予者提交对基提交所做的更改组合在一起。其中包含更改的文件路径列表：添加、删除、修改或冲突。")]),a._v(" "),s("p",[s("code",[a._v("Git")]),a._v(" 获取出现在基索引、接收方索引或给定方索引中的所有文件的列表。对于每一个，它都比较索引项以决定对文件所做的更改。它向"),s("code",[a._v("diff")]),a._v(" 写入一个对应的条目。在本例中，"),s("code",[a._v("diff")]),a._v(" 有两个条目。")]),a._v(" "),s("p",[a._v("第一个条目是 "),s("code",[a._v("data/letter.txt")]),a._v("。此文件的内容在基中是 "),s("code",[a._v("a")]),a._v("，在接收器中是 "),s("code",[a._v("b")]),a._v("，在给定者中是 "),s("code",[a._v("a")]),a._v("。基和接收端的内容不同。但在基础和给予者上是一样的。"),s("code",[a._v("Git")]),a._v(" 看到内容是由接收者修改的，而不是给出者。所以判定 "),s("code",[a._v("data/letter.txt")]),a._v(" 的 "),s("code",[a._v("diff")]),a._v(" 条目是一个修改，而不是冲突。")]),a._v(" "),s("p",[s("code",[a._v("diff")]),a._v(" 中的第二个条目是 "),s("code",[a._v("data/number.txt")]),a._v("。在这种情况下，内容在基部和接收器中是相同的，而在给予者中是不同的。因此，"),s("code",[a._v("data/letter.txt")]),a._v(" 的 "),s("code",[a._v("diff")]),a._v(" 条目也是一个修改。")]),a._v(" "),s("p",[a._v("第五，"),s("code",[a._v("diff")]),a._v(" 中的条目所指示的更改将应用于工作副本。"),s("code",[a._v("data/letter.txt")]),a._v(" 的内容设置为 "),s("code",[a._v("b")]),a._v("，"),s("code",[a._v("data/number.txt")]),a._v(" 的内容设置为 4。")]),a._v(" "),s("p",[a._v("第六，"),s("code",[a._v("diff")]),a._v(" 中的条目指示的更改将应用于索引。"),s("code",[a._v("data/letter.txt")]),a._v(" 的条目指向 b 对应的 "),s("code",[a._v("blob")]),a._v("，"),s("code",[a._v("data/number.txt")]),a._v(" 的条目指向 4 对应的 "),s("code",[a._v("blob")]),a._v("。")]),a._v(" "),s("p",[a._v("第七，提交更新后的索引。")]),a._v(" "),s("p",[a._v("最后，"),s("code",[a._v("Git")]),a._v(" 将当前分支的指针指向这个新的提交。")]),a._v(" "),s("h2",{attrs:{id:"合并来自不同血统的两个提交-这两个提交都修改同一文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并来自不同血统的两个提交-这两个提交都修改同一文件"}},[a._v("#")]),a._v(" 合并来自不同血统的两个提交，这两个提交都修改同一文件")]),a._v(" "),s("p",[a._v("先切换到 "),s("code",[a._v("master")]),a._v(" 分支进行一次合并（快速），以同步两个分支的进度：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge deputy\n")])])]),s("p",[a._v("然后再回到 "),s("code",[a._v("deputy")]),a._v(" 分支对 "),s("code",[a._v("number.txt")]),a._v(" 进行修改后提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout deputy\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'5'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b5'")]),a._v("\n")])])]),s("p",[a._v("接着再回到 "),s("code",[a._v("master")]),a._v(" 分支，同样对 "),s("code",[a._v("number.txt")]),a._v(" 文件进行修改后提交；")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'6'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b6'")]),a._v("\n")])])]),s("p",[a._v("最后，再将 "),s("code",[a._v("deputy")]),a._v(" 分支的修改合并到当前分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge deputy\n")])])]),s("p",[a._v("前面的工作和上面合并一样，但是到第四步时生成的 "),s("code",[a._v("diff")]),a._v(" 仅有一个条目："),s("code",[a._v("data/number.txt")]),a._v("。由于它的内容在接收方、给定方和基中不同，所以被标记为冲突。")]),a._v(" "),s("p",[a._v("第五步，将 "),s("code",[a._v("diff")]),a._v(" 中的条目所指示的更改将应用于工作副本。对于冲突区域，"),s("code",[a._v("Git")]),a._v(" 将两个版本写入工作副本中的文件。"),s("code",[a._v("data/number.txt")]),a._v(" 的内容设置为：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" HEAD\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" deputy\n")])])]),s("p",[a._v("第六，"),s("code",[a._v("diff")]),a._v(" 中的条目指示的更改将应用于索引。索引中的条目由其文件路径和阶段的组合唯一标识。未经许可的文件的条目的阶段为 0。在合并之前，索引如下所示，其中 0 是阶段值：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 61780798228d17af2d34fce4cfbdf35556832472 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 1e8b314962144c26d5e0e50fd29d2ca327864913 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("       data/number.txt\n")])])]),s("p",[a._v("将 "),s("code",[a._v("merge diff")]),a._v(" 写入索引后，索引如下所示：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 61780798228d17af2d34fce4cfbdf35556832472 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" b8626c4cff2849624fb67f87cd0ad72b163671ad "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("       data/number.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 1e8b314962144c26d5e0e50fd29d2ca327864913 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("       data/number.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 7ed6ff82de6bcc2a78243fc9c54d3ef5ac14da69 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("       data/number.txt\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阶段 0 中 data/letter.txt 的条目与合并前相同")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阶段 0 的 data/number.txt 条目已消失。这里有三个新条目，它们的存在告诉 Git data/number.txt 有冲突")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阶段 1 的条目具有 base data/number.txt 内容的哈希")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阶段 2 的条目具有接收者 data/number.txt 内容的哈希值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阶段 3 的条目具有给定方 data/number.txt 内容的哈希")]),a._v("\n")])])]),s("p",[a._v("通过将 "),s("code",[a._v("data/number.txt")]),a._v(" 的内容设置为 11 来集成两个冲突版本的内容。然后将文件添加到索引中，告诉 "),s("code",[a._v("Git")]),a._v(" 冲突已经解决。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'11'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n")])])]),s("p",[a._v("结果 "),s("code",[a._v("Git")]),a._v(" 添加了一个包含 11 的 "),s("code",[a._v("blob")]),a._v("，并从索引中删除阶段 1、2 和 3 的 "),s("code",[a._v("data/number.txt")]),a._v(" 条目。它使用新 "),s("code",[a._v("blob")]),a._v(" 的散列在第 0 阶段添加 "),s("code",[a._v("data/number.txt")]),a._v(" 条目。索引现在显示：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" 61780798228d17af2d34fce4cfbdf35556832472 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/letter.txt\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" b4de3947675361a7770d29b8982c407b0ec6b2a0 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("       data/number.txt\n")])])]),s("p",[a._v("第七，手动提交。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b11'")]),a._v("\n")])])]),s("p",[s("code",[a._v("Git")]),a._v(" 在存储库中看到 "),s("code",[a._v(".Git/MERGE_HEAD")]),a._v("，知晓正在进行合并。于是它检查索引，发现没有冲突。接着它创建了一个新的提交 "),s("code",[a._v("b11")]),a._v(" 来记录解析合并的内容。")]),a._v(" "),s("p",[a._v("接着，它删除 "),s("code",[a._v(".git/MERGE_HEAD")]),a._v(" 处的文件。这就完成了合并。")]),a._v(" "),s("p",[a._v("最后，"),s("code",[a._v("Git")]),a._v(" 将当前分支 "),s("code",[a._v("master")]),a._v(" 指向新的提交。")]),a._v(" "),s("h2",{attrs:{id:"移除文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[a._v("#")]),a._v(" 移除文件")]),a._v(" "),s("p",[a._v("删除 "),s("code",[a._v("letter.txt")]),a._v(" 文件：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" data/letter.txt\n")])])]),s("p",[s("code",[a._v("Git")]),a._v(" 将从工作副本中删除 "),s("code",[a._v("letter.txt")]),a._v(" 文件。对应的条目也将从索引中删除。")]),a._v(" "),s("p",[a._v("接着进行提交。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'11'")]),a._v("\n")])])]),s("p",[a._v("作为提交的一部分，"),s("code",[a._v("Git")]),a._v(" 一如既往地构建表示索引内容的树图。树图中不包括 "),s("code",[a._v("data/letter.txt")]),a._v("，因为它不在索引中。")]),a._v(" "),s("h2",{attrs:{id:"复制仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复制仓库"}},[a._v("#")]),a._v(" 复制仓库")]),a._v(" "),s("p",[a._v("复制 "),s("code",[a._v("alpha")]),a._v(" 整个目录：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n      ~ $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" -R alpha bravo\n")])])]),s("p",[a._v("现在我们有了两个一模一样的仓库，试着在 "),s("code",[a._v("alpha")]),a._v(" 仓库中连接另一个仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("      ~ $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" alpha\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" bravo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/bravo\n")])])]),s("p",[a._v("也就是说在 "),s("code",[a._v("alpha")]),a._v(" 上建立了一个远程存储库 "),s("code",[a._v("bravo")]),a._v("。这会在 "),s("code",[a._v("alpha/.git/config")]),a._v(" 文件中添加一些行：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("remote "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bravo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    url "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/bravo\n    fetch "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" +refs/heads/*:refs/remotes/bravo/*\n")])])]),s("p",[a._v("这些行指定 "),s("code",[a._v("../bravo")]),a._v(" 目录中有一个名为 "),s("code",[a._v("bravo")]),a._v(" 的远程存储库。")]),a._v(" "),s("h2",{attrs:{id:"从远程拉取分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从远程拉取分支"}},[a._v("#")]),a._v(" 从远程拉取分支")]),a._v(" "),s("p",[a._v("首先，前往 "),s("code",[a._v("bravo")]),a._v(" 仓库修改 "),s("code",[a._v("number.txt")]),a._v(" 文件并进行提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/bravo\n~/bravo $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/bravo $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/bravo $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12'")]),a._v("\n")])])]),s("p",[a._v("然后，回到 "),s("code",[a._v("alpha")]),a._v(" 仓库从 "),s("code",[a._v("bravo")]),a._v(" 仓库拉取 "),s("code",[a._v("master")]),a._v(" 分支：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/bravo $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/alpha\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" fetch bravo master\n")])])]),s("p",[a._v("期间，"),s("code",[a._v("Git")]),a._v(" 先获取 "),s("code",[a._v("master")]),a._v(" 在 "),s("code",[a._v("bravo")]),a._v(" 上指向的提交的散列。这是 "),s("code",[a._v("12")]),a._v(" 对应提交的哈希值。")]),a._v(" "),s("p",[a._v("其次，"),s("code",[a._v("Git")]),a._v(" 列出了该次提交所依赖的所有对象：提交对象本身、其树图中的对象、该次提交的祖先提交及其树图中的对象。")]),a._v(" "),s("p",[a._v("随后将从该列表中删除 "),s("code",[a._v("alpha")]),a._v(" 对象数据库已经拥有的任何对象。它将其余部分复制到 "),s("code",[a._v("alpha/.git/objects/")]),a._v(" 中。")]),a._v(" "),s("p",[a._v("第三，位于 "),s("code",[a._v("alpha/.git/refs/remotes/bravo/master")]),a._v(" 的具体 "),s("code",[a._v("ref")]),a._v(" 文件的内容被设置为 12 对应提交的散列。")]),a._v(" "),s("p",[a._v("第四，"),s("code",[a._v("alpha/.git/FETCH_HEAD")]),a._v(" 的内容设置为：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("584648bdda3d23312d4f12b0648c02815d32e526                branch "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'master'")]),a._v(" of "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/bravo\n")])])]),s("p",[a._v("这表示最近的 "),s("code",[a._v("fetch")]),a._v(" 命令从 "),s("code",[a._v("bravo")]),a._v(" 获取了 "),s("code",[a._v("master")]),a._v(" 的 12 对应的提交。")]),a._v(" "),s("h2",{attrs:{id:"合并-fetch-head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并-fetch-head"}},[a._v("#")]),a._v(" 合并 FETCH_HEAD")]),a._v(" "),s("p",[a._v("合并 FETCH_HEAD：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge FETCH_HEAD\n")])])]),s("p",[a._v("FETCH_HEAD 和分支类似，只是另一个指针。作为给予者它指向 12 对应的提交。而 HEAD 作为接受者则指向 11 对应的提交。"),s("code",[a._v("Git")]),a._v(" 将执行快速向前合并，并让 "),s("code",[a._v("master")]),a._v(" 指向 12 对应的提交。")]),a._v(" "),s("h2",{attrs:{id:"从远程拉取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从远程拉取"}},[a._v("#")]),a._v(" 从远程拉取")]),a._v(" "),s("p",[a._v("从 "),s("code",[a._v("bravo")]),a._v(" 拉取 "),s("code",[a._v("master")]),a._v(" 到 "),s("code",[a._v("alpha")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull bravo master\n")])])]),s("p",[s("code",[a._v("Pull")]),a._v(" 是 “fetch and merge FETCH_HEAD” 的缩写。"),s("code",[a._v("Git")]),a._v(" 执行这两个命令并报告 "),s("code",[a._v("master")]),a._v(" 已经是最新的。")]),a._v(" "),s("h2",{attrs:{id:"克隆仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆仓库"}},[a._v("#")]),a._v(" 克隆仓库")]),a._v(" "),s("p",[a._v("移动到上级目录，克隆 "),s("code",[a._v("alpha")]),a._v(" 仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n~ $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone alpha charlie\n")])])]),s("p",[a._v("克隆仓库和我们上面复制仓库非常相似。"),s("code",[a._v("Git")]),a._v(" 创建了一个名为 "),s("code",[a._v("charlie")]),a._v(" 的新目录，并将它其初始化为 "),s("code",[a._v("Git repo")]),a._v("，接着将 "),s("code",[a._v("alpha")]),a._v(" 添加为名为 "),s("code",[a._v("origin")]),a._v(" 的远程仓库，最后获取 "),s("code",[a._v("origin")]),a._v(" 并合并 FETCH-HEAD。")]),a._v(" "),s("h2",{attrs:{id:"将分支推送到远程签出的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将分支推送到远程签出的分支"}},[a._v("#")]),a._v(" 将分支推送到远程签出的分支")]),a._v(" "),s("p",[a._v("回到 "),s("code",[a._v("alpha")]),a._v(" 仓库，修改 "),s("code",[a._v("number.txt")]),a._v(" 文件并提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("      ~ $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" alpha\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'13'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'13'")]),a._v("\n")])])]),s("p",[a._v("将 "),s("code",[a._v("charlie")]),a._v(" 添加为新的远程仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" charlie "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/charlie\n")])])]),s("p",[a._v("推送 "),s("code",[a._v("master")]),a._v(" 到 "),s("code",[a._v("charlie")]),a._v(" 仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push charlie master\n")])])]),s("p",[a._v("提交 13 所需的所有对象都被复制到 "),s("code",[a._v("charlie")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("Git")]),a._v(" 拒绝推送到远程签出的分支。这是有道理的。推送将更新远程索引和头部。如果有人在远程编辑工作副本，这将导致混乱。")]),a._v(" "),s("p",[a._v("此时，用户可以创建一个新的分支，将提交 13 合并到其中，并将该分支推给 "),s("code",[a._v("charlie")]),a._v("。但是，实际上，他们需要一个存储库，可以随时推送到。")]),a._v(" "),s("p",[a._v("他们希望有一个中心存储库，可以从中推送，但没有人直接提交给它。类似 "),s("code",[a._v("GitHub")]),a._v("，他们想要一个光秃秃的仓库。")]),a._v(" "),s("h2",{attrs:{id:"克隆裸存储库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆裸存储库"}},[a._v("#")]),a._v(" 克隆裸存储库")]),a._v(" "),s("p",[a._v("移动到上层目录，克隆 "),s("code",[a._v("alpha")]),a._v(" 仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n      ~ $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone alpha delta --bare\n")])])]),s("p",[a._v("此次将 "),s("code",[a._v("delta")]),a._v(" 克隆为一个光秃秃的存储库。有两个不同之处：配置文件指示存储库是空的，通常存储在 "),s("code",[a._v(".git")]),a._v(" 目录中的文件存储在存储库的根目录中：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("delta\n├── HEAD\n├── config\n├── objects\n└── refs\n")])])]),s("h2",{attrs:{id:"推送分支到裸存储库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送分支到裸存储库"}},[a._v("#")]),a._v(" 推送分支到裸存储库")]),a._v(" "),s("p",[a._v("回到 "),s("code",[a._v("alpha")]),a._v(" 仓库，并将 "),s("code",[a._v("delta")]),a._v(" 设置为远程仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("      ~ $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" alpha\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" delta "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/delta\n")])])]),s("p",[a._v("然后，修改 "),s("code",[a._v("number.txt")]),a._v(" 文件并进行提交：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'14'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" data/number.txt\n~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'14'")]),a._v("\n")])])]),s("p",[a._v("最后，将 "),s("code",[a._v("master")]),a._v(" 分支推送到 "),s("code",[a._v("delta")]),a._v(" 仓库：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("~/alpha $ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push delta master\n")])])]),s("p",[a._v("首先，主分支上提交 14 所需的所有对象都从 "),s("code",[a._v("alpha/.git/objects/")]),a._v(" 复制到 "),s("code",[a._v("delta/objects/")]),a._v("。")]),a._v(" "),s("p",[a._v("其次，"),s("code",[a._v("delta/refs/heads/master")]),a._v(" 更新为指向提交 14。")]),a._v(" "),s("p",[a._v("最后，"),s("code",[a._v("alpha/.git/refs/remotes/delta/master")]),a._v(" 设置为指向提交 14。"),s("code",[a._v("alpha")]),a._v(" 拥有 "),s("code",[a._v("delta")]),a._v(" 状态的最新记录。")]),a._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[s("code",[a._v("Git")]),a._v(" 是建立在一个图上的。几乎每个 "),s("code",[a._v("Git")]),a._v(" 命令都处理这个图。要深入理解 "),s("code",[a._v("Git")]),a._v("，请关注此图的属性，而不是工作流或命令。")]),a._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/76634986",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入 Git 索引（一）：索引文件结构篇"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://wolfsonliu.github.io/archive/2018/li-jie-git-index-wen-jian.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("理解 Git index 文件"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[a._v("Git 内部原理 - Git 对象"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://codewords.recurse.com/issues/two/git-from-the-inside-out",target:"_blank",rel:"noopener noreferrer"}},[a._v("Git from the inside out"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);