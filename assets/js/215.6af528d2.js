(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{627:function(s,t,a){"use strict";a.r(t);var n=a(62),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("p",[s._v("Nginx 的配置可以分为三大块：全局块、Events 块和 Http 块。")]),s._v(" "),a("h2",{attrs:{id:"全局快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局快"}},[s._v("#")]),s._v(" 全局快")]),s._v(" "),a("p",[s._v("全局快包含从配置文件开始到 "),a("code",[s._v("events")]),s._v(" 块之间的内容，主要是设置一些影响 Nginx 服务器整体运行的配置指令。")]),s._v(" "),a("p",[s._v("在全局快中主要配置运行 Nginx 服务器的用户（组），允许生成的 Worker Process 数、进程 PID、日志存放路径和类型以及配置文件的引入等。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("这是 Nginx 服务器并发处理服务的关键配置，"),a("code",[s._v("worker_processes")]),s._v(" 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。")]),s._v(" "),a("h2",{attrs:{id:"events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[s._v("#")]),s._v(" events")]),s._v(" "),a("p",[s._v("Events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。")]),s._v(" "),a("p",[s._v("常用的设置包括是否开启对多 Worker Process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 Worker Process 可以同时支持的最大连接数等。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("events "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  worker_connections "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("上述例子就表示每个 Worker Process 支持的最大连接数为 1024。")]),s._v(" "),a("p",[s._v("这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。")]),s._v(" "),a("h2",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[s._v("#")]),s._v(" http")]),s._v(" "),a("p",[a("code",[s._v("http")]),s._v(" 块也可以简单分为 "),a("code",[s._v("http")]),s._v(" 全局块和 "),a("code",[s._v("server")]),s._v(" 块。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("http")]),s._v(" 全局块中配置的指令包括文件引入、 MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。")]),s._v(" "),a("p",[a("code",[s._v("server")]),s._v(" 块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。")]),s._v(" "),a("p",[s._v("每个 "),a("code",[s._v("http")]),s._v(" 块可以包括多个 "),a("code",[s._v("server")]),s._v(" 块，而每个 "),a("code",[s._v("server")]),s._v(" 块就相当于一个虚拟主机。")]),s._v(" "),a("p",[s._v("另外，每个 "),a("code",[s._v("server")]),s._v(" 块也分为全局 "),a("code",[s._v("server")]),s._v(" 块，以及可以同时包含多个 "),a("code",[s._v("locaton")]),s._v(" 块。")]),s._v(" "),a("p",[s._v("全局 "),a("code",[s._v("server")]),s._v(" 块最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。")]),s._v(" "),a("p",[s._v("每个 "),a("code",[s._v("server")]),s._v(" 块可以配置多个 "),a("code",[s._v("location")]),s._v(" 块。")]),s._v(" "),a("p",[a("code",[s._v("location")]),s._v(" 块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如前面的 /uri-string）进行匹配，对特定的请求进行处理。")]),s._v(" "),a("p",[s._v("地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。")]),s._v(" "),a("h3",{attrs:{id:"location"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location"}},[s._v("#")]),s._v(" location")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("location "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("   URI\n  ┬      ┬    ┬\n  │      │    └─────────────── 前缀"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("正则\n  │      └────────────── 可选的修饰符（用于匹配模式及优先级）\n  └──────────────── 必须的\n")])])]),a("p",[s._v("其中修饰符可以为：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("=")]),s._v(": 用于不含正则表达式的 URI 前，要求请求字符串与 URI 严格匹配，如果匹配成功就停止向下搜索并立即处理该请求。")]),s._v(" "),a("li",[a("code",[s._v("~")]),s._v(": 用于表示 URI 包含正则表达式，并且区分大小写。")]),s._v(" "),a("li",[a("code",[s._v("~*")]),s._v(": 用于表示 URI 包含正则表达式，并且不区分大小写。")]),s._v(" "),a("li",[a("code",[s._v("^~*")]),s._v(": 用于不含正则表达式的 URI 前，要求 Nginx 服务器找到表示 URI 和请求字符串匹配度最高的 "),a("code",[s._v("location")]),s._v(" 后，立即使用此 "),a("code",[s._v("location")]),s._v(" 处理请求，而不再使用 "),a("code",[s._v("location")]),s._v(" 块中的正则 URI 和请求字符串做匹配。")])]),s._v(" "),a("h2",{attrs:{id:"案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[s._v("#")]),s._v(" 案例")]),s._v(" "),a("p",[s._v("环境：Windows（主机） + centos 7（虚拟机）。")]),s._v(" "),a("p",[s._v("我们可以先关闭掉虚拟机的防火墙，方便主机访问虚拟机上的服务。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("systemctl stop firewalld.service\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进一步，还可以禁止开机启动")]),s._v("\nsystemctl disable firewalld.service\n")])])]),a("p",[s._v("关闭后可以查看防火墙的状态：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ firewall-cmd --stat\nnot running\n")])])]),a("p",[s._v("另外，为了能够让 Nginx 正常工作还需要确认停用 SELinux：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关闭")]),s._v("\nsetenforce "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),a("h3",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[s._v("#")]),s._v(" 反向代理")]),s._v(" "),a("p",[s._v("实现效果：打开浏览器，在浏览器地址栏输入地址 "),a("code",[s._v("www.nginx.com/www")]),s._v("，访问到 Linux 系统中启动的 "),a("code",[s._v("tomcat")]),s._v(" 静态页面。")]),s._v(" "),a("p",[s._v("为了方便，我们这里使用 Docker 来启动 "),a("code",[s._v("tomcat")]),s._v("。另外，由于现在的 "),a("code",[s._v("tomcat")]),s._v(" 镜像启动后，默认的页面是空的，不好确认服务是否确认成功，所以我们先在原有的镜像上加点东西。")]),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" tomcat")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir -p mkdir /usr/local/tomcat/webapps/www")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Nginx, I\'m tomcat 8080"')]),s._v(" >> /usr/local/tomcat/webapps/www/index.html")]),s._v("\n")])])]),a("p",[s._v("使用上面的 Dockerfile 文件生成新的 "),a("code",[s._v("kisstar/tomcat")]),s._v(" 镜像：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t kisstar/tomcat "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("p",[s._v("通过该镜像启动：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 --name "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" kisstar/tomcat\n")])])]),a("p",[s._v("现在我们通过 IP 就可以访问到上面的内容，假如虚拟机的 IP 为 192.168.1.7，则可以访问 "),a("a",{attrs:{href:"http://192.168.1.7:8080/www",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://192.168.1.7:8080/www"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("为了可以通过域名来进行访问，我们需要在主机的 "),a("code",[s._v("hosts")]),s._v("（Windows 目录：C:\\Windows\\System32\\drivers\\etc）下进行配置：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7 www.nginx.com\n")])])]),a("p",[s._v("配置成功后可以通过 "),a("a",{attrs:{href:"http://www.nginx.com:8080/www/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.nginx.com:8080/www/"),a("OutboundLink")],1),s._v(" 访问。")]),s._v(" "),a("p",[s._v("接着就是配置 Nginx：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/nginx/conf.d/default.conf\n")])])]),a("p",[s._v("此处主要是设置监听的服务器名称（server_name）和转发的地址（proxy_pass）：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    server_name  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      proxy_pass http://192.168.1.7:8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      root  /www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      index  index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("配置完成后重启重载 Nginx：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("nginx -s reload\n")])])]),a("p",[s._v("到这里，我们就可以通过 "),a("a",{attrs:{href:"http://www.nginx.com/www/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.nginx.com/www/"),a("OutboundLink")],1),s._v(" 进行访问了。")]),s._v(" "),a("p",[s._v("在上面的例子中，我们直接代理了所有以 "),a("code",[s._v("/")]),s._v(" 开头的请求到 8080 端口，根据需求，我们还可以根据路径代理到不同的服务里。")]),s._v(" "),a("p",[s._v("比如：访问 "),a("code",[s._v("www.nginx.com/www")]),s._v(" 转发到 8080 端口，访问 "),a("code",[s._v("www.nginx.com/app")]),s._v(" 则转发到 8081 端口。")]),s._v(" "),a("p",[s._v("现在，根据上面的镜像我们在 8081 端口新启动一个服务：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":8080 --name "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(" kisstar/tomcat\n")])])]),a("p",[s._v("为了进行区别，我们改变一下新的容器中的内容：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(" /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" webapps/www webapps/app\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Nginx, I\'m tomcat 8081"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" webapps/app/index.html\n")])])]),a("p",[s._v("通过 "),a("code",[s._v("Ctrl + p + q")]),s._v(" 退出容器，然后开始配置 Nginx：")]),s._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("listen")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server_name")]),s._v("  192.168.1.7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("location")]),s._v(" ~ /www")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_pass")]),s._v(" http://192.168.1.7:8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("location")]),s._v(" ~ /app")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_pass")]),s._v(" http://192.168.1.7:8081")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[s._v("#")]),s._v(" 负载均衡")]),s._v(" "),a("p",[s._v("目标：在浏览器中输入地址 "),a("a",{attrs:{href:"http://www.nginx.com/www/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.nginx.com/www/"),a("OutboundLink")],1),s._v("，通过配置负载均衡，将请求平均分发到 8080 或 8081 端口。")]),s._v(" "),a("p",[s._v("由于现在是要访问同一个路径，所以我们需要在上面的基础上修改一下第二个容器的静态目录路径：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" /usr/local/tomcat/webapps/app /usr/local/tomcat/webapps/www\n")])])]),a("p",[s._v("接着就是配置 Nginx：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加服务器列表")]),s._v("\nupstream myserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  server  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7:8080 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7:8081 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server_name  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  location ~ / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    proxy_pass http://myserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 代理到配置的服务器列表")]),s._v("\n    index index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("配置完成后重载 Nginx，然后访问 "),a("a",{attrs:{href:"http://www.nginx.com/www/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.nginx.com/www/"),a("OutboundLink")],1),s._v("，快速刷新，会发现返回的内容后交替的出现。这是由于 Nginx 根据我们的配置把请求分配到了不同的服务器上。")]),s._v(" "),a("p",[s._v("负载均衡策略包括：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("轮询（默认）")])])]),s._v(" "),a("p",[s._v("每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 "),a("code",[s._v("down")]),s._v(" 掉，会自动剔除。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("weight")])])]),s._v(" "),a("p",[a("code",[s._v("weight")]),s._v(" 代表权重，默认为 1，权重越高被分配的客户端越多。")]),s._v(" "),a("p",[s._v("指定轮询几率，"),a("code",[s._v("weight")]),s._v(" 和访问比率成正比，用于后端服务器性能不均的情况。 例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("upstream server_pool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  server  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.8 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ul",[a("li",[a("strong",[s._v("ip_hash")])])]),s._v(" "),a("p",[s._v("每个请求按访问 IP 的 "),a("code",[s._v("hash")]),s._v(" 结果分配，这样每个访客固定访问一个后端服务器，如此可以解决 "),a("code",[s._v("session")]),s._v(" 的问题。 例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("upstream server_pool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  ip_hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7:80"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.8:80"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ul",[a("li",[a("strong",[s._v("fair")]),s._v("（第三方，需要安装第三方模块）")])]),s._v(" "),a("p",[s._v("按后端服务器的响应时间来分配请求，响应时间短的优先分配。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("upstream server_pool "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  server "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7:80"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.8:80"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  fair"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[s._v("#")]),s._v(" 动静分离")]),s._v(" "),a("p",[s._v("Nginx 动静分离严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。")]),s._v(" "),a("p",[s._v("动静分离从目前实现角度来讲大致分为两种：")]),s._v(" "),a("ul",[a("li",[s._v("纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；")]),s._v(" "),a("li",[s._v("动态跟静态文件混合在一起发布，通过 Nginx 来分开。")])]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("location")]),s._v(" 指定不同的后缀名实现不同的请求转发。使用 "),a("code",[s._v("expires")]),s._v(" 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。")]),s._v(" "),a("p",[s._v("具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期。")]),s._v(" "),a("p",[s._v("这里我们简单的配置一下如何通过 Nginx 来访问静态资源：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  listen    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  server_name "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  location /www/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    root /data/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    index index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  location /images/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    root /data/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("有点像是把我们的站点放到了 "),a("code",[s._v("/data/")]),s._v(" 目录，当访问 "),a("code",[s._v("192.168.1.7/www")]),s._v(" 或 "),a("code",[s._v("192.168.1.7/images")]),s._v(" 时会在 "),a("code",[s._v("/data/")]),s._v(" 目录读取相应的文件。")]),s._v(" "),a("h3",{attrs:{id:"高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[s._v("#")]),s._v(" 高可用")]),s._v(" "),a("p",[s._v("高可用（HA, High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。")]),s._v(" "),a("p",[s._v("这里我们使用 Nginx 来接受第一手请求，当 Nginx 宕机时，那么所有对外提供的接口都将导致无法访问。为了避免这样的惨剧发送，我们可以使用 "),a("code",[s._v("keepalived")]),s._v(" 来实现 Nginx 的高可用。")]),s._v(" "),a("p",[s._v("Keepalived 软件起初是专为 LVS 负载均衡软件设计的，用来管理并监控 LVS 集群系统中各个服务节点的状态，后来又加入了可以实现高可用的 VRRP (Virtual Router Redundancy Protocol, 虚拟路由器冗余协议）功能。")]),s._v(" "),a("p",[s._v("我们可以通过 "),a("code",[s._v("yum")]),s._v(" 来安装:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y keepalived\n")])])]),a("p",[s._v("通过这种方式安装后，其配置文件（keepalived.conf）会存放在 "),a("code",[s._v("/etc/keepalived")]),s._v(" 中。修改主机配置：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("vrrp_script chk_http_port "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  script "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/src/check_nginx_pid.sh"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检测 Nginx 是否可用的脚本")]),s._v("\n  interval "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检测脚本执行的间隔，单位是秒")]),s._v("\n  weight "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 权重")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# vrrp 实例定义部分")]),s._v("\nvrrp_instance VI_1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  state MASTER            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定 keepalived 的角色，MASTER 为主，BACKUP 为备")]),s._v("\n  interface ens33         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前进行 vrrp 通讯的网络接口卡")]),s._v("\n  virtual_router_id "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 虚拟路由编号，主从要一直")]),s._v("\n  priority "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 优先级，数值越大，获取处理请求的优先级越高")]),s._v("\n  advert_int "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查间隔，默认为1s(vrrp组播周期秒数)")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#授权访问")]),s._v("\n  authentication "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    auth_type PASS "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置验证类型和密码，MASTER 和 BACKUP 必须使用相同的密码才能正常通信")]),s._v("\n    auth_pass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  track_script "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    chk_http_port  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#（调用检测脚本）")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  virtual_ipaddress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.9 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义虚拟 IP，每行一个，可多设")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("备用机配置：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("vrrp_script chk_http_port "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  script "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/src/check_nginx_pid.sh"')]),s._v("\n  interval "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n  weight "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nvrrp_instance VI_1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  state BACKUP\n  interface ens33\n  virtual_router_id "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),s._v("\n  priority "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("\n  advert_int "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  authentication "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    auth_type PASS\n    auth_pass "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  track_script "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    chk_http_port\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  virtual_ipaddress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".1.9\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("检测脚本：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检测 Nginx 是否启动")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -C nginx --no-header "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" -l"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$A")]),s._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  systemctl start nginx\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -C nginx --no-header "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" -l"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Nginx 重启失败后停掉 keepalived 服务，进行VIP转移")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("killall")]),s._v(" keepalived\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),a("p",[s._v("启动：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("systemctl start keepalived.service\n")])])]),a("p",[s._v("现在就可以通过虚拟 IP（192.168.1.9）进行访问了，当主机宕机之后，就会自动切换到备用机上进行处理。")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("每个 Nginx 程序都由一个 "),a("code",[s._v("master")]),s._v(" 进程和多个 "),a("code",[s._v("woker")]),s._v(" 进程构成。这有利于：")]),s._v(" "),a("ul",[a("li",[s._v("利用 Nginx 进行热部署操作")]),s._v(" "),a("li",[s._v("每个 "),a("code",[s._v("woker")]),s._v(" 是独立的进程，如果有其中的一个 "),a("code",[s._v("woker")]),s._v(" 出现问题，其他 "),a("code",[s._v("woker")]),s._v(" 仍然可以工作")])]),s._v(" "),a("p",[s._v("那么设置多少个 "),a("code",[s._v("woker")]),s._v(" 合适呢？")]),s._v(" "),a("p",[s._v("通常，"),a("code",[s._v("worker")]),s._v(" 数和服务器的 CPU 数相等是最为适宜的。")]),s._v(" "),a("p",[s._v("另外，发送一个请求又会占用了 "),a("code",[s._v("woker")]),s._v(" 几个连接数？")]),s._v(" "),a("p",[s._v("请求的发起和响应就是两个连接数，而当 "),a("code",[s._v("tomcat")]),s._v(" 要访问数据库时就是四个，所以答案是 2 个或则 4 个。")]),s._v(" "),a("p",[s._v("再者，假设 Nginx 有一个 "),a("code",[s._v("master")]),s._v("、四个 "),a("code",[s._v("woker")]),s._v("，并且每个 "),a("code",[s._v("woker")]),s._v(" 支持最大的连接数 1024，那么支持的最大并发数是多少？")]),s._v(" "),a("ul",[a("li",[s._v("普通的静态访问最大并发数是: "),a("code",[s._v("worker_connections * worker_processes / 2")]),s._v("。")]),s._v(" "),a("li",[s._v("如果是 HTTP 作 为反向代理来说，最大并发数量应该是: "),a("code",[s._v("worker_connections * worker_processes / 4")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://cn.linux.vbird.org/linux_basic/0440processcontrol_5.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("鸟哥的 Linux 私房菜 -- 程序管理与 SELinux 初探"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/SimpleWu/p/11004902.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("生产环境之 Nginx 高可用方案 - SimpleWu - 博客园"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://besterwin.gitee.io/blogs/knowledge/middle/Nginx.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Nginx.mmap"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);