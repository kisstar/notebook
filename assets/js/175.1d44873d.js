(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{589:function(t,s,a){"use strict";a.r(s);var n=a(62),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ajax-指北"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax-指北"}},[t._v("#")]),t._v(" AJAX 指北")]),t._v(" "),a("p",[t._v("AJAX（Asynchronous JavaScript and XML）不是新的编程语言，而是一种使用现有标准的新方法，或者说是一套由 JavaScript 调用的 API。")]),t._v(" "),a("p",[t._v("如今前后台数据交换的格式通常是 JSON，但是为什么最后一个字母代表的是 XML 呢？这存在着一个历史原因，因为最开始的时候是以 XML 作为转换数据的格式，而 JSON 是在后来兴起的。")]),t._v(" "),a("p",[t._v("AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。")]),t._v(" "),a("h2",{attrs:{id:"如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),a("p",[t._v("在不考虑兼容、设置请求头和跨域等情况时，它的使用其实非常简单，类似我们打开浏览器、输入网址回车，然后等待服务器的响应。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开浏览器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输入网址")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://cnodejs.org/api/v1/topics'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回车")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待...")]),t._v("\n")])])]),a("p",[t._v("当然事实上并非如此简单，但却可以很好的帮我们记住大概的流程。")]),t._v(" "),a("h3",{attrs:{id:"创建-xmlhttprequest-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-xmlhttprequest-对象"}},[t._v("#")]),t._v(" 创建 XMLHttpRequest 对象")]),t._v(" "),a("p",[t._v("所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateXHR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" XMLHttpRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" ActiveXObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 适用于IE7之前的版本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activeXString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" versions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MSXML2.XMLHttp.6.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MSXML2.XMLHttp.3.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MSXML2.XMLHttp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" versions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActiveXObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("versions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activeXString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" versions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActiveXObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("activeXString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'No XHR object available.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于其他浏览器中对 XHR 的实现与 IE 最早的实现是兼容的，因此就可以在所有浏览器中都以相同方式使用上面创建的 "),a("code",[t._v("xhr")]),t._v(" 对象。")]),t._v(" "),a("h3",{attrs:{id:"xhr-的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xhr-的用法"}},[t._v("#")]),t._v(" XHR 的用法")]),t._v(" "),a("p",[t._v("在使用 XHR 对象时，要调用的第一个方法就是 "),a("code",[t._v("open()")]),t._v(" 方法，该方法可以接受 3 个参数：")]),t._v(" "),a("ul",[a("li",[t._v("要发送的请求的类型（GET、POST 等）；")]),t._v(" "),a("li",[t._v("请求的 URL；")]),t._v(" "),a("li",[t._v("表示是否异步发送请求的布尔值。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://cnodejs.org/api/v1/topics'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"http-头部信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-头部信息"}},[t._v("#")]),t._v(" HTTP 头部信息")]),t._v(" "),a("p",[t._v("每个 HTTP 请求和响应都会带有相应的头部信息，默认情况下，在发送 XHR 请求的同时，还会发送下列头部信息：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Accept")]),t._v("：浏览器能够处理的内容类型。")]),t._v(" "),a("li",[a("code",[t._v("Accept-Charset")]),t._v("：浏览器能够显示的字符集。")]),t._v(" "),a("li",[a("code",[t._v("Accept-Encoding")]),t._v("：浏览器能够处理的压缩编码。")]),t._v(" "),a("li",[a("code",[t._v("Accept-Language")]),t._v("：浏览器当前设置的语言。")]),t._v(" "),a("li",[a("code",[t._v("Connection")]),t._v("：浏览器与服务器之间连接的类型。")]),t._v(" "),a("li",[a("code",[t._v("Cookie")]),t._v("：当前页面设置的任何 Cookie。")]),t._v(" "),a("li",[a("code",[t._v("Host")]),t._v("：发出请求的页面所在的域 。")]),t._v(" "),a("li",[a("code",[t._v("Referer")]),t._v("：发出请求的页面的 URI。")]),t._v(" "),a("li",[a("code",[t._v("User-Agent")]),t._v("：浏览器的用户代理字符串。")])]),t._v(" "),a("p",[t._v("XHR 对象也提供了操作这两种头部（即请求头部和响应头部）信息的方法。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("setRequestHeader()")]),t._v(" 方法就可以设置自定义的请求头部信息。这个方法接受两个参数：头部字段的名称和头部字段的值。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("要成功发送请求头部信息，必须在调用 "),a("code",[t._v("open()")]),t._v(" 方法之后且调用 "),a("code",[t._v("send()")]),t._v(" 方法之前调用 "),a("code",[t._v("setRequestHeader()")]),t._v("。")]),t._v(" "),a("li",[t._v("如果发送的请求体是 "),a("code",[t._v("urlencoded")]),t._v(" 格式必须设置请求头的 "),a("code",[t._v("Content-Type")]),t._v(" 设置为 "),a("code",[t._v("application/x-www-form-urlencoded")]),t._v("。")])])]),t._v(" "),a("p",[t._v("调用 XHR 对象的 "),a("code",[t._v("getResponseHeader()")]),t._v(" 方法并传入头部字段名称，可以取得相应的响应头部信息。而调用 "),a("code",[t._v("getAllResponseHeaders()")]),t._v(" 方法则可以取得一个包含所有头部信息的长字符串。")]),t._v(" "),a("h3",{attrs:{id:"get-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-请求"}},[t._v("#")]),t._v(" GET 请求")]),t._v(" "),a("p",[t._v("GET 是最常见的请求类型，最常用于向服务器查询某些信息。它可以将查询字符串参数追加到 URL 的末尾，以便将信息发送给服务器。")]),t._v(" "),a("p",[t._v("对 XHR 而言，位于传入 "),a("code",[t._v("open()")]),t._v(" 方法的 URL 末尾的查询字符串必须经过 "),a("code",[t._v("encodeURIComponent()")]),t._v(" 的编码，然后才能放到 URL 的末尾，而且所有名-值对儿都必须由和号（&）分隔。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 辅助函数：向现有URL的末尾添加查询字符串参数\n * @param url 请求地址\n * @param key 拼接的名值对的key值\n * @param value 拼接的名值对的值\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addURLParam")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'&'")]),t._v("\n  url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'='")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeURIComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" url\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"post-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-请求"}},[t._v("#")]),t._v(" POST 请求")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("open()")]),t._v(' 方法第一个参数的位置传入 "POST"，就可以初始化一个 POST 请求，通常用于向服务器发送应该被保存的数据。')]),t._v(" "),a("p",[t._v("POST 请求把数据作为请求的主体提交，主体不仅可以包含非常多的数据，而且格式不限。")]),t._v(" "),a("p",[t._v("默认情况下，服务器对 POST 请求和提交 Web 表单的请求并不会一视同仁。因此，服务器端必须有程序来读取发送过来的原始数据，并从中解析出有用的部分。我们可以使用 XHR 来模仿表单提交：")]),t._v(" "),a("ul",[a("li",[t._v("将 "),a("code",[t._v("Content-Type")]),t._v(" 头部信息设置为 "),a("code",[t._v("application/x-www-form-urlencoded")]),t._v("，也就是表单提交时的内容类型；")]),t._v(" "),a("li",[t._v("以适当的格式创建一个字符串（POST 数据的格式与查询字符串格式相同）。")])]),t._v(" "),a("p",[t._v("需要注意的一点是，是调用 "),a("code",[t._v("open()")]),t._v(" 方法并不会真正发送请求，而只是启动一个请求以备发送。如果要发送特定的请求，必须调用 "),a("code",[t._v("send()")]),t._v(" 方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("send()")]),t._v(" 方法可以接受接收一个参数（且仅用于 POST 请求），即作为请求主体发送的数据。")]),t._v(" "),a("h3",{attrs:{id:"响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应"}},[t._v("#")]),t._v(" 响应")]),t._v(" "),a("p",[t._v("在收到响应后，响应的数据会自动填充 XHR 对象的属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("responseText")]),t._v("：作为响应主体被返回的文本。")]),t._v(" "),a("li",[a("code",[t._v("responseXML")]),t._v('：如果响应的内容类型是 "text/xml" 或 "application/xml"，这个属性中将保存包含着响应数据的 XML DOM 文档。')]),t._v(" "),a("li",[a("code",[t._v("status")]),t._v("：响应的 HTTP 状态。")]),t._v(" "),a("li",[a("code",[t._v("statusText")]),t._v("：HTTP 状态的说明。")])]),t._v(" "),a("p",[t._v("在接收到响应后，第一步是检查 "),a("code",[t._v("status")]),t._v(" 属性，以确定响应已经成功返回。一般来说，可以将 HTTP 状态代码为 200 作为成功的标志。此时，"),a("code",[t._v("responseText")]),t._v(" 属性的内容已经就绪。")]),t._v(" "),a("p",[t._v("根据返回的状态代码，可能会显示由服务器返回的内容，也可能会显示一条错误消息。所以建议要通过检测 "),a("code",[t._v("status")]),t._v(" 来决定下一步的操作，不要依赖 "),a("code",[t._v("statusText")]),t._v("。")]),t._v(" "),a("p",[t._v("无论内容类型是什么，响应主体的内容都会保存到 "),a("code",[t._v("responseText")]),t._v(" 属性中；而对于非 XML 数据而言，"),a("code",[t._v("responseXML")]),t._v(" 属性的值将为 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[t._v("#")]),t._v(" 同步和异步")]),t._v(" "),a("p",[t._v("发送请求时提到的 "),a("code",[t._v("open()")]),t._v(" 方法的第三个参数默认为 "),a("code",[t._v("true")]),t._v("，表示发送的是异步请求，当设置为 "),a("code",[t._v("false")]),t._v(" 时则发送同步请求。")]),t._v(" "),a("p",[t._v("采用同步请求意味着 JavaScript 需要等待服务器的响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("当发送同步请求时，不要编写 "),a("code",[t._v("onreadystatechange")]),t._v(" 函数，只需要把代码放到 "),a("code",[t._v("send()")]),t._v(" 语句后面。")])]),t._v(" "),a("p",[t._v("对于 Web 开发人员来说，发送异步请求是一个巨大的进步：")]),t._v(" "),a("ul",[a("li",[t._v("在等待服务器响应时执行其他脚本。")]),t._v(" "),a("li",[t._v("当响应就绪后对响应进行处理。")])]),t._v(" "),a("p",[t._v("我们不推荐使用 "),a("code",[t._v("async=false")]),t._v("，尽管对于一些小型的请求，它是可行的。")]),t._v(" "),a("p",[t._v("采用异步请求时，由于客户端并不知道服务器何时才会响应我们的请求，所以 AJAX 采取事件监听的机制来处理。")]),t._v(" "),a("h3",{attrs:{id:"onreadystatechange-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onreadystatechange-事件"}},[t._v("#")]),t._v(" onreadystatechange 事件")]),t._v(" "),a("p",[t._v("XHR 对象上的 "),a("code",[t._v("readyState")]),t._v(" 属性存有 XMLHttpRequest 的状态信息：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("属性")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("onreadystatechange")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("存储函数（或函数名），每当 "),a("code",[t._v("readyState")]),t._v(" 属性改变时，就会调用该函数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("readyState")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("status")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('200: "OK"，404: 未找到页面')])])])]),t._v(" "),a("p",[t._v("如上所见，每当 "),a("code",[t._v("readyState")]),t._v(" 改变时，就会触发 "),a("code",[t._v("onreadystatechange")]),t._v(" 事件。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState = 0 => 请求未初始化")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://cnodejs.org/api/v1/topics'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState = 1 => 服务器连接已建立")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState = 2 => 请求已接收 => 已经接受到响应报文的响应头")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState = 3 => 请求处理中 => 正在下载响应体（所以此时的响应体可能唯空、可能包含部分")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// readyState = 4 => 请求已完成，且响应已就绪 => 获取完整的响应报文")]),t._v("\n")])])]),a("p",[t._v("通常，我们只对 "),a("code",[t._v("readyState")]),t._v(" 值为 4 的阶段感兴趣，因为这时所有数据都已经就绪。")]),t._v(" "),a("p",[t._v("另外，在接收到响应之前还可以调用 "),a("code",[t._v("abort()")]),t._v(" 方法来取消异步请求，调用这个方法后，XHR 对象会停止触发事件，而且也不再允许访问任何与响应有关的对象属性。")]),t._v(" "),a("p",[t._v("在终止请求之后，还应该对 XHR 对象进行解引用操作。由于内存原因，不建议重用 XHR 对象。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("必须在调用 "),a("code",[t._v("open()")]),t._v(" 之前指定 "),a("code",[t._v("onreadystatechange")]),t._v(" 事件处理程序才能确保跨浏览器兼容性。")]),t._v(" "),a("li",[t._v("通过 "),a("code",[t._v("abort()")]),t._v(" 方法取消请求成功后会触发 "),a("code",[t._v("onabort")]),t._v(" 事件。"),a("code",[t._v("abort()")]),t._v(" 方法需要在 "),a("code",[t._v("send()")]),t._v(" 方法后调用。")]),t._v(" "),a("li",[t._v("通常，事件监听的注册越早越好。")])])]),t._v(" "),a("h2",{attrs:{id:"xmlhttprequest-2-级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-2-级"}},[t._v("#")]),t._v(" XMLHttpRequest 2 级")]),t._v(" "),a("p",[t._v("鉴于 XHR 已经得到广泛接受，成为了事实标准，W3C 也着手制定相应的标准以规范其行为，所以 XMLHttpRequest 2 级则进一步发展了 XHR。")]),t._v(" "),a("h3",{attrs:{id:"formdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formdata"}},[t._v("#")]),t._v(" FormData")]),t._v(" "),a("p",[t._v("现代 Web 应用中频繁使用的一项功能就是表单数据的序列化，XMLHttpRequest 2 级为此定义了 "),a("code",[t._v("FormData")]),t._v(" 类型。使用起来非常的方便，创建了一个 "),a("code",[t._v("FormData")]),t._v(" 对象，并向其中添加了一些数据：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Anani'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里使用的 "),a("code",[t._v("append()")]),t._v(" 方法如上所见可接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像这样添加任意多个键值对儿。")]),t._v(" "),a("p",[t._v("通过向 "),a("code",[t._v("FormData")]),t._v(" 构造函数中传入表单元素，也可以用表单元素的数据预先向其中填入键值对儿：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("创建了 "),a("code",[t._v("FormData")]),t._v(" 的实例后，可以将它直接传给 XHR 的 "),a("code",[t._v("send()")]),t._v(" 方法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("使用 "),a("code",[t._v("FormData")]),t._v(" 的方便之处体现在不必明确地在 XHR 对象上设置请求头部。XHR 对象能够识别传入的数据类型是 "),a("code",[t._v("FormData")]),t._v(" 的实例，并配置适当的头部信息。")]),t._v(" "),a("h3",{attrs:{id:"超时限定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超时限定"}},[t._v("#")]),t._v(" 超时限定")]),t._v(" "),a("p",[t._v("XHR 对象添加了一个 "),a("code",[t._v("timeout")]),t._v(" 属性，表示请求在等待响应多少毫秒之后就终止。")]),t._v(" "),a("p",[t._v("在给 "),a("code",[t._v("timeout")]),t._v(" 设置一个数值后，如果在规定的时间内浏览器还没有接收到响应，那么就会触发 "),a("code",[t._v("timeout")]),t._v(" 事件，进而会调用 "),a("code",[t._v("ontimeout")]),t._v(" 事件处理程序。")]),t._v(" "),a("p",[t._v("需要注意的是，超时导致请求终止，会调用 "),a("code",[t._v("ontimeout")]),t._v(" 事件处理程序。但此时 "),a("code",[t._v("readyState")]),t._v(" 可能已经改变为 4 了，这意味着会调用 "),a("code",[t._v("onreadystatechange")]),t._v(" 事件处理程序。")]),t._v(" "),a("p",[t._v("如果在超时终止请求之后再访问 "),a("code",[t._v("status")]),t._v(" 属性，就会导致错误。为避免浏览器报告错误，可以将检查 "),a("code",[t._v("status")]),t._v(" 属性的语句封装在一个 "),a("code",[t._v("try-catch")]),t._v(" 语句当中。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreateXHR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置超时标准为 1000 毫秒")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("ontimeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功的处理程序")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设由ontimeout 事件处理程序处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://cnodejs.org/api/v1/topics'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"overridemimetype-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overridemimetype-方法"}},[t._v("#")]),t._v(" overrideMimeType() 方法")]),t._v(" "),a("p",[a("code",[t._v("overrideMimeType()")]),t._v(" 方法，用于重写 XHR 响应的 MIME 类型。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("调用 "),a("code",[t._v("overrideMimeType()")]),t._v(" 必须在 "),a("code",[t._v("send()")]),t._v(" 方法之前，才能保证重写响应的 MIME 类型。")])]),t._v(" "),a("p",[t._v("比如，服务器返回的 MIME 类型是 "),a("code",[t._v("text/plain")]),t._v("，但数据中实际包含的是 XML。根据 MIME 类型，即使数据是 XML，"),a("code",[t._v("responseXML")]),t._v(" 属性中仍然是 "),a("code",[t._v("null")]),t._v("。通过调用 "),a("code",[t._v("overrideMimeType()")]),t._v(" 方法，可以保证把响应当作 XML 而非纯文本来处理。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createXHR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://cnodejs.org/api/v1/topics'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("overrideMimeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/xml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"进度事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进度事件"}},[t._v("#")]),t._v(" 进度事件")]),t._v(" "),a("p",[t._v("Progress Events 规范是 W3C 的一个工作草案，定义了与客户端服务器通信有关的事件，有以下 6 个进度事件：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("loadstart")]),t._v("：在接收到响应数据的第一个字节时触发。")]),t._v(" "),a("li",[a("code",[t._v("progress")]),t._v("：在接收响应期间持续不断地触发。")]),t._v(" "),a("li",[a("code",[t._v("error")]),t._v("：在请求发生错误时触发。")]),t._v(" "),a("li",[a("code",[t._v("abort")]),t._v("：在因为调用 "),a("code",[t._v("abort()")]),t._v(" 方法而终止连接时触发。")]),t._v(" "),a("li",[a("code",[t._v("load")]),t._v("：在接收到完整的响应数据时触发。")]),t._v(" "),a("li",[a("code",[t._v("loadend")]),t._v("：在通信完成或者触发 "),a("code",[t._v("error")]),t._v("、"),a("code",[t._v("abort")]),t._v(" 或 "),a("code",[t._v("load")]),t._v(" 事件后触发。")])]),t._v(" "),a("p",[t._v("每个请求都从触发 "),a("code",[t._v("loadstart")]),t._v(" 事件开始，接下来是一或多个 "),a("code",[t._v("progress")]),t._v(" 事件，然后触发 "),a("code",[t._v("error")]),t._v("、"),a("code",[t._v("abort")]),t._v(" 或 "),a("code",[t._v("load")]),t._v(" 事件中的一个，最后以触发 "),a("code",[t._v("loadend")]),t._v(" 事件结束。")]),t._v(" "),a("h3",{attrs:{id:"load-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-事件"}},[t._v("#")]),t._v(" load 事件")]),t._v(" "),a("p",[t._v("响应接收完毕后将触发 "),a("code",[t._v("load")]),t._v(" 事件，因此也就没有必要去检查 "),a("code",[t._v("readyState")]),t._v(" 属性（此时 readyState = 4）。")]),t._v(" "),a("p",[a("code",[t._v("onload")]),t._v(" 事件处理程序会接收到一个 "),a("code",[t._v("event")]),t._v(" 对象，其 "),a("code",[t._v("target")]),t._v(" 属性 就指向 XHR 对象实例，因而可以访问到 XHR 对象的所有方法和属性。")]),t._v(" "),a("p",[t._v("只要浏览器接收到服务器的响应，不管其状态如何，都会触发 "),a("code",[t._v("load")]),t._v(" 事件。而这意味着你必须要检查 "),a("code",[t._v("status")]),t._v(" 属性，才能确定数据是否真的已经可用。")]),t._v(" "),a("h3",{attrs:{id:"progress-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progress-事件"}},[t._v("#")]),t._v(" progress 事件")]),t._v(" "),a("p",[a("code",[t._v("progress")]),t._v(" 事件，这个事件会在浏览器接收新数据期间周期性地触发。")]),t._v(" "),a("p",[a("code",[t._v("onprogress")]),t._v(" 事件处理程序会接收到一个 "),a("code",[t._v("event")]),t._v(" 对象，其 "),a("code",[t._v("target")]),t._v(" 属性是 XHR 对象，但包含着三个额外的属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("engthComputable")]),t._v(" 是一个表示进度信息是否可用的布尔值；")]),t._v(" "),a("li",[a("code",[t._v("position")]),t._v(" 表示已经接收的字节数；")]),t._v(" "),a("li",[a("code",[t._v("totalSize")]),t._v(" 表示根据 "),a("code",[t._v("Content-Length")]),t._v(" 响应头部确定的预期字节数。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("为确保正常执行，必须在调用 "),a("code",[t._v("open()")]),t._v(" 方法之前添加 "),a("code",[t._v("onprogress")]),t._v(" 事件处理程序。")])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript 高级程序设计(第 3 版)")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.runoob.com/ajax/ajax-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("AJAX 教程 | 菜鸟教程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);