(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{654:function(t,s,a){"use strict";a.r(s);var n=a(62),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"调用-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用-c"}},[t._v("#")]),t._v(" 调用 C++")]),t._v(" "),a("p",[t._v("Node.js 调用 C++ 主流的有两种方法，分别是 addons 和 ffi。前者是官方提供的 C++ 扩展实现方案，但是由于需要使用模版，并且要对 v8 引擎有一定的了解，门槛较高。")]),t._v(" "),a("p",[t._v("后者则可以直接调用动态链接库，相关的 node-ffi 就是一个用于使用纯 JavaScript 加载和调用动态库的 Node.js 插件。它可以用来在不编写任何 C ++ 代码的情况下创建与本地 DLL 库的绑定。")]),t._v(" "),a("p",[t._v("node-ffi 连接了 C 代码和 JS 代码, 通过 Buffer 类实现内存共享来完成调用, 其内部通过 ref，ref-array 和 ref-struct 来实现类型转换。")]),t._v(" "),a("p",[t._v("与此类似的项目是 ffi-napi，其更新维护更胜 node-ffi，接下里我们以 ffi-napi 为例来看下具体的使用方式。")]),t._v(" "),a("h2",{attrs:{id:"创建动态链接库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建动态链接库"}},[t._v("#")]),t._v(" 创建动态链接库")]),t._v(" "),a("p",[t._v("1、创建动态库头文件：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.hpp")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照 C 语言方式编译和链接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("编译后的函数名字在 C 和 C++ 中是不同的，对于 C++而言，由于拥有函数重载的特性，所以基本函数名称相同，若返回值类型或参数的个数和类型任一者不同，编译后的函数名字都不一样。")]),t._v(" "),a("p",[t._v("在 ffi 中，它在 dll 中查找函数名字的时候, 是用 C 风格来查找的，所以如果你的函数使用 C++编译的, ffl 在这个 dll 中就找不到这个函数：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("/Users/kisstar/tmp/node_modules/ffi-napi/lib/dynamic_library.js:113\n    throw new Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dynamic Symbol Retrieval Error: '")]),t._v(" + this.error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          ^\n\nError: Dynamic Symbol Retrieval Error: dlsym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0x7fb9e751feb0, sayHello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": symbol not found\n    at DynamicLibrary.get "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/Users/kisstar/tmp/node_modules/ffi-napi/lib/dynamic_library.js:113:11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at /Users/kisstar/tmp/node_modules/ffi-napi/lib/library.js:55:21\n    at Array.forEach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("anonymous"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at new Library "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/Users/kisstar/tmp/node_modules/ffi-napi/lib/library.js:52:28"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at file:///Users/kisstar/tmp/index.js:4:13\n    at ModuleJob.run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node:internal/modules/esm/module_job:185:25"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at async Promise.all "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at async ESMLoader.import "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node:internal/modules/esm/loader:281:24"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at async loadESM "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node:internal/process/esm_loader:88:5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at async handleMainPromise "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node:internal/modules/run_main:65:12"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("2、创建动态库源文件：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello.cpp")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.hpp"')])]),t._v("\n\nusing namespace std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("3、生成动态链接库：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("g++ -g -o libhello.dylib -fpic -shared hello.cpp\n")])])]),a("h2",{attrs:{id:"调用动态链接库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用动态链接库"}},[t._v("#")]),t._v(" 调用动态链接库")]),t._v(" "),a("p",[t._v("1、安装 ffi-napi：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" ffi-napi\n")])])]),a("p",[t._v("2、在脚本中调用：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.mjs")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ffi "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ffi-napi'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ffi.Library 用于注册函数，第一个入参为 DLL 路径，最好为文件绝对路径")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ffi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Library")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./libhello.dylib'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sayHello 是 dll 中定义的函数，两者名称需要一致")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式为：[a, [b，c....]]，其中 a 是函数出参类型，[b，c] 是 dll 函数的入参类型")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'void'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以用文本表示类型， 更推荐用`ref.types.xx`表示类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ndll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("3、执行脚本：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("node")]),t._v(" index.mjs\nHello world\n")])])]),a("h2",{attrs:{id:"其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),a("p",[t._v("在 Windows 中的动态库中，需要使用 "),a("code",[t._v("__declspec(dllexport)")]),t._v(" 声明导出函数、类、对象等供外面调用，而 gcc（Linux 和 Mac OS X 的默认编译器）下，所有函数默认均导出。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/silenzio/p/11606389.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("electron 教程(三): 使用 ffi-napi 引入 C++的 dll - Silenzio - 博客园"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903645905977357",target:"_blank",rel:"noopener noreferrer"}},[t._v("node-ffi 使用指南 - 掘金"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.adityasui.com/article/5eb3d86fa9b22753cd415a14",target:"_blank",rel:"noopener noreferrer"}},[t._v("MacOS 下 动态链接库 dylib 的生成 - Aditya's Blog"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/52php/p/5681711.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C/C++ 静态链接库(.a) 与 动态链接库(.so) - 52php - 博客园"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);